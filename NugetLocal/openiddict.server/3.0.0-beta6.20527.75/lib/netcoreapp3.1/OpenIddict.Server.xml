<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenIddict.Server</name>
    </assembly>
    <members>
        <member name="T:OpenIddict.Server.IOpenIddictServerHandler`1">
            <summary>
            Represents a handler able to process <typeparamref name="TContext"/> events.
            </summary>
            <typeparam name="TContext">The type of the context associated with events handled by this instance.</typeparam>
        </member>
        <member name="M:OpenIddict.Server.IOpenIddictServerHandler`1.HandleAsync(`0)">
            <summary>
            Processes the event.
            </summary>
            <param name="context">The context associated with the event to process.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerConfiguration">
            <summary>
            Contains the methods required to ensure that the OpenIddict server configuration is valid.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerConfiguration.PostConfigure(System.String,OpenIddict.Server.OpenIddictServerOptions)">
            <summary>
            Populates the default OpenIddict server options and ensures
            that the configuration is in a consistent and valid state.
            </summary>
            <param name="name">The name of the options instance to configure, if applicable.</param>
            <param name="options">The options instance to initialize.</param>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerDispatcher.#ctor(Microsoft.Extensions.Logging.ILogger{OpenIddict.Server.OpenIddictServerDispatcher},Microsoft.Extensions.Options.IOptionsMonitor{OpenIddict.Server.OpenIddictServerOptions},System.IServiceProvider)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerDispatcher"/> class.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEndpointType">
            <summary>
            Represents the type of an OpenIddict server endpoint.
            </summary>
        </member>
        <member name="F:OpenIddict.Server.OpenIddictServerEndpointType.Unknown">
            <summary>
            Unknown endpoint.
            </summary>
        </member>
        <member name="F:OpenIddict.Server.OpenIddictServerEndpointType.Authorization">
            <summary>
            Authorization endpoint.
            </summary>
        </member>
        <member name="F:OpenIddict.Server.OpenIddictServerEndpointType.Token">
            <summary>
            Token endpoint.
            </summary>
        </member>
        <member name="F:OpenIddict.Server.OpenIddictServerEndpointType.Logout">
            <summary>
            Logout endpoint.
            </summary>
        </member>
        <member name="F:OpenIddict.Server.OpenIddictServerEndpointType.Configuration">
            <summary>
            Configuration endpoint.
            </summary>
        </member>
        <member name="F:OpenIddict.Server.OpenIddictServerEndpointType.Cryptography">
            <summary>
            Cryptography endpoint.
            </summary>
        </member>
        <member name="F:OpenIddict.Server.OpenIddictServerEndpointType.Userinfo">
            <summary>
            Userinfo endpoint.
            </summary>
        </member>
        <member name="F:OpenIddict.Server.OpenIddictServerEndpointType.Introspection">
            <summary>
            Introspection endpoint.
            </summary>
        </member>
        <member name="F:OpenIddict.Server.OpenIddictServerEndpointType.Revocation">
            <summary>
            Revocation endpoint.
            </summary>
        </member>
        <member name="F:OpenIddict.Server.OpenIddictServerEndpointType.Device">
            <summary>
            Device endpoint.
            </summary>
        </member>
        <member name="F:OpenIddict.Server.OpenIddictServerEndpointType.Verification">
            <summary>
            Verification endpoint.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ExtractAuthorizationRequestContext">
            <summary>
            Represents an event called for each request to the authorization endpoint to give the user code
            a chance to manually extract the authorization request from the ambient HTTP context.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ExtractAuthorizationRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ExtractAuthorizationRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ExtractAuthorizationRequestContext.Request">
            <summary>
            Gets or sets the request or <c>null</c> if it was extracted yet.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ValidateAuthorizationRequestContext">
            <summary>
            Represents an event called for each request to the authorization endpoint
            to determine if the request is valid and should continue to be processed.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ValidateAuthorizationRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ValidateAuthorizationRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ValidateAuthorizationRequestContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ValidateAuthorizationRequestContext.ClientId">
            <summary>
            Gets the client_id specified by the client application.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ValidateAuthorizationRequestContext.RedirectUri">
            <summary>
            Gets the redirect_uri specified by the client application.
            If it's not provided by the client, it must be set by
            the user code by calling <see cref="M:OpenIddict.Server.OpenIddictServerEvents.ValidateAuthorizationRequestContext.SetRedirectUri(System.String)"/>.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ValidateAuthorizationRequestContext.SetRedirectUri(System.String)">
            <summary>
            Populates the <see cref="P:OpenIddict.Server.OpenIddictServerEvents.ValidateAuthorizationRequestContext.RedirectUri"/> property with the specified redirect_uri.
            </summary>
            <param name="address">The redirect_uri to use when redirecting the user agent.</param>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.HandleAuthorizationRequestContext">
            <summary>
            Represents an event called for each validated authorization request
            to allow the user code to decide how the request should be handled.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.HandleAuthorizationRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.HandleAuthorizationRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleAuthorizationRequestContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.HandleAuthorizationRequestContext.SignIn(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Allows OpenIddict to return a sign-in response using the specified principal.
            </summary>
            <param name="principal">The claims principal.</param>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ApplyAuthorizationResponseContext">
            <summary>
            Represents an event called before the authorization response is returned to the caller.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ApplyAuthorizationResponseContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ApplyAuthorizationResponseContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyAuthorizationResponseContext.Request">
            <summary>
            Gets or sets the request, or <c>null</c> if it couldn't be extracted.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyAuthorizationResponseContext.Response">
            <summary>
            Gets or sets the response.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyAuthorizationResponseContext.Principal">
            <summary>
            Gets or sets the security principal.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyAuthorizationResponseContext.AccessToken">
            <summary>
            Gets the access code expected to
            be returned to the client application.
            Depending on the flow, it may be null.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyAuthorizationResponseContext.AuthorizationCode">
            <summary>
            Gets the authorization code expected to
            be returned to the client application.
            Depending on the flow, it may be null.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyAuthorizationResponseContext.Error">
            <summary>
            Gets the error code returned to the client application.
            When the response indicates a successful response,
            this property returns <c>null</c>.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyAuthorizationResponseContext.RedirectUri">
            <summary>
            Gets or sets the callback URL the user agent will be redirected to, if applicable.
            Note: manually changing the value of this property is generally not recommended
            and extreme caution must be taken to ensure the user agent is not redirected to
            an untrusted address, which would result in an "open redirection" vulnerability.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyAuthorizationResponseContext.ResponseMode">
            <summary>
            Gets or sets the response mode used to redirect the user agent, if applicable.
            Note: manually changing the value of this property is generally not recommended.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.BaseContext">
            <summary>
            Represents an abstract base class used for certain event contexts.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.BaseContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.BaseContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.BaseContext.Transaction">
            <summary>
            Gets the environment associated with the current request being processed.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.BaseContext.Issuer">
            <summary>
            Gets or sets the issuer address associated with the current transaction, if available.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.BaseContext.EndpointType">
            <summary>
            Gets or sets the endpoint type that handled the request, if applicable.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.BaseContext.Localizer">
            <summary>
            Gets the localizer used to localize the messages generated by OpenIddict.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.BaseContext.Logger">
            <summary>
            Gets the logger responsible of logging processed operations.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.BaseContext.Options">
            <summary>
            Gets the OpenIddict server options.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.BaseRequestContext">
            <summary>
            Represents an abstract base class used for certain event contexts.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.BaseRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.BaseRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.BaseRequestContext.IsRequestHandled">
            <summary>
            Gets a boolean indicating whether the request was fully handled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.BaseRequestContext.IsRequestSkipped">
            <summary>
            Gets a boolean indicating whether the request processing was skipped.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.BaseRequestContext.HandleRequest">
            <summary>
            Marks the request as fully handled. Once declared handled,
            a request shouldn't be processed further by the underlying host.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.BaseRequestContext.SkipRequest">
            <summary>
            Marks the request as skipped. Once declared skipped, a request
            shouldn't be processed further by OpenIddict but should be allowed
            to go through the next components in the processing pipeline
            (if this pattern is supported by the underlying host).
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.BaseValidatingClientContext">
            <summary>
            Represents an abstract base class used for certain event contexts.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.BaseValidatingClientContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.BaseValidatingClientContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.BaseValidatingClientContext.ClientId">
            <summary>
            Gets the "client_id" parameter for the current request.
            The authorization server application is responsible for
            validating this value to ensure it identifies a registered client.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.BaseValidatingClientContext.ClientSecret">
            <summary>
            Gets the "client_secret" parameter for the current request.
            The authorization server application is responsible for
            validating this value to ensure it identifies a registered client.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.BaseValidatingContext">
            <summary>
            Represents an abstract base class used for certain event contexts.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.BaseValidatingContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.BaseValidatingContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.BaseValidatingContext.IsRejected">
            <summary>
            Gets a boolean indicating whether the request will be rejected.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.BaseValidatingContext.Error">
            <summary>
            Gets or sets the "error" parameter returned to the client application.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.BaseValidatingContext.ErrorDescription">
            <summary>
            Gets or sets the "error_description" parameter returned to the client application.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.BaseValidatingContext.ErrorUri">
            <summary>
            Gets or sets the "error_uri" parameter returned to the client application.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.BaseValidatingContext.Reject">
            <summary>
            Rejects the request.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.BaseValidatingContext.Reject(System.String)">
            <summary>
            Rejects the request.
            </summary>
            <param name="error">The "error" parameter returned to the client application.</param>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.BaseValidatingContext.Reject(System.String,System.String)">
            <summary>
            Rejects the request.
            </summary>
            <param name="error">The "error" parameter returned to the client application.</param>
            <param name="description">The "error_description" parameter returned to the client application.</param>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.BaseValidatingContext.Reject(System.String,System.String,System.String)">
            <summary>
            Rejects the request.
            </summary>
            <param name="error">The "error" parameter returned to the client application.</param>
            <param name="description">The "error_description" parameter returned to the client application.</param>
            <param name="uri">The "error_uri" parameter returned to the client application.</param>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.BaseValidatingTicketContext">
            <summary>
            Represents an abstract base class used for certain event contexts.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.BaseValidatingTicketContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.BaseValidatingTicketContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.BaseValidatingTicketContext.Principal">
            <summary>
            Gets or sets the security principal.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.BaseValidatingTicketContext.ClientId">
            <summary>
            Gets the client identifier, or <c>null</c> if the client application is unknown.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext">
            <summary>
            Represents an event called when processing an incoming request.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext"/> class.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ProcessErrorContext">
            <summary>
            Represents an event called when processing an errored response.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ProcessErrorContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ProcessErrorContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessErrorContext.Request">
            <summary>
            Gets or sets the request or <c>null</c> if it couldn't be extracted.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessErrorContext.Response">
            <summary>
            Gets or sets the response.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ProcessAuthenticationContext">
            <summary>
            Represents an event called when processing an authentication operation.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ProcessAuthenticationContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ProcessAuthenticationContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessAuthenticationContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessAuthenticationContext.Principal">
            <summary>
            Gets or sets the security principal.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessAuthenticationContext.Token">
            <summary>
            Gets or sets the token to validate.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessAuthenticationContext.TokenType">
            <summary>
            Gets or sets the expected type of the token.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ProcessChallengeContext">
            <summary>
            Represents an event called when processing a challenge response.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ProcessChallengeContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ProcessChallengeContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessChallengeContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessChallengeContext.Response">
            <summary>
            Gets or sets the response.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext">
            <summary>
            Represents an event called when processing a sign-in response.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.Response">
            <summary>
            Gets or sets the response.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.GenerateAccessToken">
            <summary>
            Gets or sets a boolean indicating whether an access token
            should be generated (and optionally returned to the client).
            Note: overriding the value of this property is generally not
            recommended, except when dealing with non-standard clients.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.GenerateAuthorizationCode">
            <summary>
            Gets or sets a boolean indicating whether an authorization code
            should be generated (and optionally returned to the client).
            Note: overriding the value of this property is generally not
            recommended, except when dealing with non-standard clients.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.GenerateDeviceCode">
            <summary>
            Gets or sets a boolean indicating whether a device code
            should be generated (and optionally returned to the client).
            Note: overriding the value of this property is generally not
            recommended, except when dealing with non-standard clients.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.GenerateIdentityToken">
            <summary>
            Gets or sets a boolean indicating whether an identity token
            should be generated (and optionally returned to the client).
            Note: overriding the value of this property is generally not
            recommended, except when dealing with non-standard clients.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.GenerateRefreshToken">
            <summary>
            Gets or sets a boolean indicating whether a refresh token
            should be generated (and optionally returned to the client).
            Note: overriding the value of this property is generally not
            recommended, except when dealing with non-standard clients.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.GenerateUserCode">
            <summary>
            Gets or sets a boolean indicating whether a user code
            should be generated (and optionally returned to the client).
            Note: overriding the value of this property is generally not
            recommended, except when dealing with non-standard clients.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.IncludeAccessToken">
            <summary>
            Gets or sets a boolean indicating whether the generated access token
            should be returned to the client application as part of the response.
            Note: overriding the value of this property is generally not
            recommended, except when dealing with non-standard clients.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.IncludeAuthorizationCode">
            <summary>
            Gets or sets a boolean indicating whether the generated authorization code
            should be returned to the client application as part of the response.
            Note: overriding the value of this property is generally not
            recommended, except when dealing with non-standard clients.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.IncludeDeviceCode">
            <summary>
            Gets or sets a boolean indicating whether the generated device code
            should be returned to the client application as part of the response.
            Note: overriding the value of this property is generally not
            recommended, except when dealing with non-standard clients.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.IncludeIdentityToken">
            <summary>
            Gets or sets a boolean indicating whether the generated identity token
            should be returned to the client application as part of the response.
            Note: overriding the value of this property is generally not
            recommended, except when dealing with non-standard clients.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.IncludeRefreshToken">
            <summary>
            Gets or sets a boolean indicating whether the generated refresh token
            should be returned to the client application as part of the response.
            Note: overriding the value of this property is generally not
            recommended, except when dealing with non-standard clients.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.IncludeUserCode">
            <summary>
            Gets or sets a boolean indicating whether the generated user code
            should be returned to the client application as part of the response.
            Note: overriding the value of this property is generally not
            recommended, except when dealing with non-standard clients.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.AccessToken">
            <summary>
            Gets or sets the generated access token, if applicable.
            The access token will only be returned if
            <see cref="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.IncludeAccessToken"/> is set to <c>true</c>.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.AccessTokenPrincipal">
            <summary>
            Gets or sets the principal containing the claims that
            will be used to create the access token, if applicable.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.AuthorizationCode">
            <summary>
            Gets or sets the generated authorization code, if applicable.
            The authorization code will only be returned if
            <see cref="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.IncludeAuthorizationCode"/> is set to <c>true</c>.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.AuthorizationCodePrincipal">
            <summary>
            Gets or sets the principal containing the claims that
            will be used to create the authorization code, if applicable.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.DeviceCode">
            <summary>
            Gets or sets the generated device code, if applicable.
            The device code will only be returned if
            <see cref="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.IncludeDeviceCode"/> is set to <c>true</c>.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.DeviceCodePrincipal">
            <summary>
            Gets or sets the principal containing the claims that
            will be used to create the device code, if applicable.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.IdentityToken">
            <summary>
            Gets or sets the generated identity token, if applicable.
            The identity token will only be returned if
            <see cref="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.IncludeIdentityToken"/> is set to <c>true</c>.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.IdentityTokenPrincipal">
            <summary>
            Gets or sets the principal containing the claims that
            will be used to create the identity token, if applicable.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.RefreshToken">
            <summary>
            Gets or sets the generated refresh token, if applicable.
            The refresh token will only be returned if
            <see cref="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.IncludeRefreshToken"/> is set to <c>true</c>.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.RefreshTokenPrincipal">
            <summary>
            Gets or sets the principal containing the claims that
            will be used to create the refresh token, if applicable.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.UserCode">
            <summary>
            Gets or sets the generated user code, if applicable.
            The user code will only be returned if
            <see cref="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.IncludeUserCode"/> is set to <c>true</c>.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext.UserCodePrincipal">
            <summary>
            Gets or sets the principal containing the claims that
            will be used to create the user code, if applicable.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ProcessSignOutContext">
            <summary>
            Represents an event called when processing a sign-out response.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ProcessSignOutContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ProcessSignOutContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignOutContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ProcessSignOutContext.Response">
            <summary>
            Gets or sets the response.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ExtractDeviceRequestContext">
            <summary>
            Represents an event called for each request to the device endpoint to give the user code
            a chance to manually extract the device request from the ambient HTTP context.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ExtractDeviceRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ExtractDeviceRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ExtractDeviceRequestContext.Request">
            <summary>
            Gets or sets the request, or <c>null</c> if it wasn't extracted yet.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ValidateDeviceRequestContext">
            <summary>
            Represents an event called for each request to the device endpoint
            to determine if the request is valid and should continue to be processed.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ValidateDeviceRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ValidateDeviceRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ValidateDeviceRequestContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.HandleDeviceRequestContext">
            <summary>
            Represents an event called for each validated device request
            to allow the user code to decide how the request should be handled.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.HandleDeviceRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.HandleDeviceRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleDeviceRequestContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ApplyDeviceResponseContext">
            <summary>
            Represents an event called before the device response is returned to the caller.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ApplyDeviceResponseContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ApplyDeviceResponseContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyDeviceResponseContext.Request">
            <summary>
            Gets or sets the request, or <c>null</c> if it couldn't be extracted.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyDeviceResponseContext.Response">
            <summary>
            Gets or sets the response.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyDeviceResponseContext.Error">
            <summary>
            Gets the error code returned to the client application.
            When the response indicates a successful response,
            this property returns <c>null</c>.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ExtractVerificationRequestContext">
            <summary>
            Represents an event called for each request to the verification endpoint to give the user code
            a chance to manually extract the verification request from the ambient HTTP context.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ExtractVerificationRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ExtractVerificationRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ExtractVerificationRequestContext.Request">
            <summary>
            Gets or sets the request, or <c>null</c> if it wasn't extracted yet.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ValidateVerificationRequestContext">
            <summary>
            Represents an event called for each request to the verification endpoint
            to determine if the request is valid and should continue to be processed.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ValidateVerificationRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ValidateVerificationRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ValidateVerificationRequestContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ValidateVerificationRequestContext.Principal">
            <summary>
            Gets or sets the security principal extracted from the user code.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.HandleVerificationRequestContext">
            <summary>
            Represents an event called for each validated verification request
            to allow the user code to decide how the request should be handled.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.HandleVerificationRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.HandleVerificationRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleVerificationRequestContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ApplyVerificationResponseContext">
            <summary>
            Represents an event called before the verification response is returned to the caller.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ApplyVerificationResponseContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ApplyVerificationResponseContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyVerificationResponseContext.Request">
            <summary>
            Gets or sets the request, or <c>null</c> if it couldn't be extracted.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyVerificationResponseContext.Response">
            <summary>
            Gets or sets the response.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyVerificationResponseContext.Error">
            <summary>
            Gets the error code returned to the client application.
            When the response indicates a successful response,
            this property returns <c>null</c>.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ExtractConfigurationRequestContext">
            <summary>
            Represents an event called for each request to the configuration endpoint to give the user code
            a chance to manually extract the configuration request from the ambient HTTP context.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ExtractConfigurationRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ExtractConfigurationRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ExtractConfigurationRequestContext.Request">
            <summary>
            Gets or sets the request, or <c>null</c> if it wasn't extracted yet.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ValidateConfigurationRequestContext">
            <summary>
            Represents an event called for each request to the configuration endpoint
            to determine if the request is valid and should continue to be processed.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ValidateConfigurationRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ValidateConfigurationRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ValidateConfigurationRequestContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext">
            <summary>
            Represents an event called for each validated configuration request
            to allow the user code to decide how the request should be handled.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext.Metadata">
            <summary>
            Gets the additional parameters returned to the client application.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext.AuthorizationEndpoint">
            <summary>
            Gets or sets the authorization endpoint address.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext.CryptographyEndpoint">
            <summary>
            Gets or sets the JWKS endpoint address.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext.DeviceEndpoint">
            <summary>
            Gets or sets the device endpoint address.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext.IntrospectionEndpoint">
            <summary>
            Gets or sets the introspection endpoint address.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext.LogoutEndpoint">
            <summary>
            Gets or sets the logout endpoint address.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext.RevocationEndpoint">
            <summary>
            Gets or sets the revocation endpoint address.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext.TokenEndpoint">
            <summary>
            Gets or sets the token endpoint address.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext.UserinfoEndpoint">
            <summary>
            Gets or sets the userinfo endpoint address.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext.Claims">
            <summary>
            Gets the list of claims supported by the authorization server.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext.CodeChallengeMethods">
            <summary>
            Gets a list of the code challenge methods
            supported by the authorization server.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext.GrantTypes">
            <summary>
            Gets the list of grant types
            supported by the authorization server.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext.IdTokenSigningAlgorithms">
            <summary>
            Gets a list of signing algorithms supported by the
            authorization server for signing the identity tokens.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext.IntrospectionEndpointAuthenticationMethods">
            <summary>
            Gets a list of client authentication methods supported by
            the introspection endpoint provided by the authorization server.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext.ResponseModes">
            <summary>
            Gets the list of response modes
            supported by the authorization server.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext.ResponseTypes">
            <summary>
            Gets the list of response types
            supported by the authorization server.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext.RevocationEndpointAuthenticationMethods">
            <summary>
            Gets a list of client authentication methods supported by
            the revocation endpoint provided by the authorization server.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext.Scopes">
            <summary>
            Gets the list of scope values
            supported by the authorization server.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext.SubjectTypes">
            <summary>
            Gets the list of subject types
            supported by the authorization server.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext.TokenEndpointAuthenticationMethods">
            <summary>
            Gets a list of client authentication methods supported by
            the token endpoint provided by the authorization server.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ApplyConfigurationResponseContext">
            <summary>
            Represents an event called before the configuration response is returned to the caller.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ApplyConfigurationResponseContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ApplyConfigurationResponseContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyConfigurationResponseContext.Request">
            <summary>
            Gets or sets the request, or <c>null</c> if it couldn't be extracted.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyConfigurationResponseContext.Response">
            <summary>
            Gets or sets the response.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyConfigurationResponseContext.Error">
            <summary>
            Gets the error code returned to the client application.
            When the response indicates a successful response,
            this property returns <c>null</c>.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ExtractCryptographyRequestContext">
            <summary>
            Represents an event called for each request to the cryptography endpoint to give the user code
            a chance to manually extract the cryptography request from the ambient HTTP context.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ExtractCryptographyRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ExtractCryptographyRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ExtractCryptographyRequestContext.Request">
            <summary>
            Gets or sets the request, or <c>null</c> if it wasn't extracted yet.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ExtractCryptographyRequestContext.Response">
            <summary>
            Gets or sets the response.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ValidateCryptographyRequestContext">
            <summary>
            Represents an event called for each request to the cryptography endpoint
            to determine if the request is valid and should continue to be processed.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ValidateCryptographyRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ValidateCryptographyRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ValidateCryptographyRequestContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.HandleCryptographyRequestContext">
            <summary>
            Represents an event called for each validated cryptography request
            to allow the user code to decide how the request should be handled.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.HandleCryptographyRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.HandleCryptographyRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleCryptographyRequestContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleCryptographyRequestContext.Keys">
            <summary>
            Gets the list of JSON Web Keys exposed by the JWKS endpoint.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ApplyCryptographyResponseContext">
            <summary>
            Represents an event called before the cryptography response is returned to the caller.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ApplyCryptographyResponseContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ApplyCryptographyResponseContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyCryptographyResponseContext.Request">
            <summary>
            Gets or sets the request, or <c>null</c> if it couldn't be extracted.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyCryptographyResponseContext.Response">
            <summary>
            Gets or sets the response.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyCryptographyResponseContext.Error">
            <summary>
            Gets the error code returned to the client application.
            When the response indicates a successful response,
            this property returns <c>null</c>.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ExtractTokenRequestContext">
            <summary>
            Represents an event called for each request to the token endpoint to give the user code
            a chance to manually extract the token request from the ambient HTTP context.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ExtractTokenRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ExtractTokenRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ExtractTokenRequestContext.Request">
            <summary>
            Gets or sets the request, or <c>null</c> if it wasn't extracted yet.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ValidateTokenRequestContext">
            <summary>
            Represents an event called for each request to the token endpoint
            to determine if the request is valid and should continue to be processed.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ValidateTokenRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ValidateTokenRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ValidateTokenRequestContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ValidateTokenRequestContext.Principal">
            <summary>
            Gets or sets the security principal extracted from the authorization
            code or the refresh token, if applicable to the current token request.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.HandleTokenRequestContext">
            <summary>
            Represents an event called for each validated token request
            to allow the user code to decide how the request should be handled.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.HandleTokenRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.HandleTokenRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleTokenRequestContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.HandleTokenRequestContext.SignIn(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Allows OpenIddict to return a sign-in response using the specified principal.
            </summary>
            <param name="principal">The claims principal.</param>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ApplyTokenResponseContext">
            <summary>
            Represents an event called before the token response is returned to the caller.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ApplyTokenResponseContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ApplyTokenResponseContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyTokenResponseContext.Request">
            <summary>
            Gets or sets the request, or <c>null</c> if it couldn't be extracted.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyTokenResponseContext.Response">
            <summary>
            Gets or sets the response.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyTokenResponseContext.Principal">
            <summary>
            Gets or sets the security principal used to forge the token response.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyTokenResponseContext.Error">
            <summary>
            Gets the error code returned to the client application.
            When the response indicates a successful response,
            this property returns <c>null</c>.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ExtractIntrospectionRequestContext">
            <summary>
            Represents an event called for each request to the introspection endpoint to give the user code
            a chance to manually extract the introspection request from the ambient HTTP context.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ExtractIntrospectionRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ExtractIntrospectionRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ExtractIntrospectionRequestContext.Request">
            <summary>
            Gets or sets the request, or <c>null</c> if it wasn't extracted yet.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ValidateIntrospectionRequestContext">
            <summary>
            Represents an event called for each request to the introspection endpoint
            to determine if the request is valid and should continue to be processed.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ValidateIntrospectionRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ValidateIntrospectionRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ValidateIntrospectionRequestContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ValidateIntrospectionRequestContext.TokenTypeHint">
            <summary>
            Gets the optional token_type_hint parameter extracted from the
            introspection request, or <c>null</c> if it cannot be found.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ValidateIntrospectionRequestContext.Principal">
            <summary>
            Gets or sets the security principal extracted from the introspected token, if available.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.HandleIntrospectionRequestContext">
            <summary>
            Represents an event called for each validated introspection request
            to allow the user code to decide how the request should be handled.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.HandleIntrospectionRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.HandleIntrospectionRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleIntrospectionRequestContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleIntrospectionRequestContext.Principal">
            <summary>
            Gets or sets the security principal extracted from the introspected token.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleIntrospectionRequestContext.Claims">
            <summary>
            Gets the additional claims returned to the caller.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleIntrospectionRequestContext.Audiences">
            <summary>
            Gets the list of audiences returned to the caller
            as part of the "aud" claim, if applicable.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleIntrospectionRequestContext.ClientId">
            <summary>
            Gets or sets the "client_id" claim returned to the caller, if applicable.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleIntrospectionRequestContext.ExpiresAt">
            <summary>
            Gets or sets the "exp" claim
            returned to the caller, if applicable.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleIntrospectionRequestContext.IssuedAt">
            <summary>
            Gets or sets the "iat" claim
            returned to the caller, if applicable.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleIntrospectionRequestContext.NotBefore">
            <summary>
            Gets or sets the "nbf" claim
            returned to the caller, if applicable.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleIntrospectionRequestContext.Scopes">
            <summary>
            Gets the list of scopes returned to the caller
            as part of the "scope" claim, if applicable.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleIntrospectionRequestContext.Subject">
            <summary>
            Gets or sets the "sub" claim
            returned to the caller, if applicable.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleIntrospectionRequestContext.TokenId">
            <summary>
            Gets or sets the "jti" claim
            returned to the caller, if applicable.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleIntrospectionRequestContext.TokenType">
            <summary>
            Gets or sets the "token_type" claim
            returned to the caller, if applicable.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleIntrospectionRequestContext.TokenUsage">
            <summary>
            Gets or sets the "token_usage" claim
            returned to the caller, if applicable.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleIntrospectionRequestContext.Username">
            <summary>
            Gets or sets the "username" claim
            returned to the caller, if applicable.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ApplyIntrospectionResponseContext">
            <summary>
            Represents an event called before the introspection response is returned to the caller.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ApplyIntrospectionResponseContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ApplyIntrospectionResponseContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyIntrospectionResponseContext.Request">
            <summary>
            Gets or sets the request, or <c>null</c> if it couldn't be extracted.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyIntrospectionResponseContext.Response">
            <summary>
            Gets or sets the response.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyIntrospectionResponseContext.Error">
            <summary>
            Gets the error code returned to the client application.
            When the response indicates a successful response,
            this property returns <c>null</c>.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ExtractRevocationRequestContext">
            <summary>
            Represents an event called for each request to the revocation endpoint to give the user code
            a chance to manually extract the revocation request from the ambient HTTP context.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ExtractRevocationRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ExtractRevocationRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ExtractRevocationRequestContext.Request">
            <summary>
            Gets or sets the request, or <c>null</c> if it wasn't extracted yet.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ValidateRevocationRequestContext">
            <summary>
            Represents an event called for each request to the revocation endpoint
            to determine if the request is valid and should continue to be processed.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ValidateRevocationRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ValidateRevocationRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ValidateRevocationRequestContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ValidateRevocationRequestContext.TokenTypeHint">
            <summary>
            Gets the optional token_type_hint parameter extracted from the
            revocation request, or <c>null</c> if it cannot be found.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ValidateRevocationRequestContext.Principal">
            <summary>
            Gets or sets the security principal extracted from the revoked token, if available.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.HandleRevocationRequestContext">
            <summary>
            Represents an event called for each validated revocation request
            to allow the user code to decide how the request should be handled.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.HandleRevocationRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.HandleRevocationRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleRevocationRequestContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleRevocationRequestContext.Principal">
            <summary>
            Gets or sets the security principal extracted from the revoked token.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleRevocationRequestContext.Claims">
            <summary>
            Gets the authentication ticket.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ApplyRevocationResponseContext">
            <summary>
            Represents an event called before the revocation response is returned to the caller.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ApplyRevocationResponseContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ApplyRevocationResponseContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyRevocationResponseContext.Request">
            <summary>
            Gets or sets the request, or <c>null</c> if it couldn't be extracted.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyRevocationResponseContext.Response">
            <summary>
            Gets or sets the response.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyRevocationResponseContext.Error">
            <summary>
            Gets the error code returned to the client application.
            When the response indicates a successful response,
            this property returns <c>null</c>.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ExtractLogoutRequestContext">
            <summary>
            Represents an event called for each request to the logout endpoint to give the user code
            a chance to manually extract the logout request from the ambient HTTP context.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ExtractLogoutRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ExtractLogoutRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ExtractLogoutRequestContext.Request">
            <summary>
            Gets or sets the request, or <c>null</c> if wasn't extracted yet.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ValidateLogoutRequestContext">
            <summary>
            Represents an event called for each request to the logout endpoint
            to determine if the request is valid and should continue to be processed.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ValidateLogoutRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ValidateLogoutRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ValidateLogoutRequestContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ValidateLogoutRequestContext.PostLogoutRedirectUri">
            <summary>
            Gets the post_logout_redirect_uri specified by the client application.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ValidateLogoutRequestContext.SetPostLogoutRedirectUri(System.String)">
            <summary>
            Populates the <see cref="P:OpenIddict.Server.OpenIddictServerEvents.ValidateLogoutRequestContext.PostLogoutRedirectUri"/> property with the specified redirect_uri.
            </summary>
            <param name="address">The post_logout_redirect_uri to use when redirecting the user agent.</param>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.HandleLogoutRequestContext">
            <summary>
            Represents an event called for each validated logout request
            to allow the user code to decide how the request should be handled.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.HandleLogoutRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.HandleLogoutRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleLogoutRequestContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleLogoutRequestContext.IsSignOutTriggered">
            <summary>
            Gets a boolean indicating whether a sign-out should be triggered.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.HandleLogoutRequestContext.SignOut">
            <summary>
            Allows OpenIddict to return a sign-out response.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ApplyLogoutResponseContext">
            <summary>
            Represents an event called before the logout response is returned to the caller.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ApplyLogoutResponseContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ApplyLogoutResponseContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyLogoutResponseContext.Request">
            <summary>
            Gets or sets the request, or <c>null</c> if it couldn't be extracted.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyLogoutResponseContext.Response">
            <summary>
            Gets or sets the response.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyLogoutResponseContext.Error">
            <summary>
            Gets the error code returned to the client application.
            When the response indicates a successful response,
            this property returns <c>null</c>.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyLogoutResponseContext.PostLogoutRedirectUri">
            <summary>
            Gets or sets the callback URL the user agent will be redirected to, if applicable.
            Note: manually changing the value of this property is generally not recommended
            and extreme caution must be taken to ensure the user agent is not redirected to
            an untrusted address, which would result in an "open redirection" vulnerability.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ExtractUserinfoRequestContext">
            <summary>
            Represents an event called for each request to the userinfo endpoint to give the user code
            a chance to manually extract the userinfo request from the ambient HTTP context.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ExtractUserinfoRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ExtractUserinfoRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ExtractUserinfoRequestContext.Request">
            <summary>
            Gets or sets the request, or <c>null</c> if it wasn't extracted yet.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ValidateUserinfoRequestContext">
            <summary>
            Represents an event called for each request to the userinfo endpoint
            to determine if the request is valid and should continue to be processed.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ValidateUserinfoRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ValidateUserinfoRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ValidateUserinfoRequestContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ValidateUserinfoRequestContext.Principal">
            <summary>
            Gets or sets the security principal extracted from the access token, if available.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.HandleUserinfoRequestContext">
            <summary>
            Represents an event called for each validated userinfo request
            to allow the user code to decide how the request should be handled.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.HandleUserinfoRequestContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.HandleUserinfoRequestContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleUserinfoRequestContext.Request">
            <summary>
            Gets or sets the request.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleUserinfoRequestContext.Principal">
            <summary>
            Gets or sets the security principal extracted from the access token.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleUserinfoRequestContext.Claims">
            <summary>
            Gets the additional claims returned to the client application.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleUserinfoRequestContext.Address">
            <summary>
            Gets or sets the value used for the "address" claim.
            Note: this value should only be populated if the "address"
            scope was requested and accepted by the resource owner.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleUserinfoRequestContext.Audiences">
            <summary>
            Gets or sets the values used for the "aud" claim.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleUserinfoRequestContext.BirthDate">
            <summary>
            Gets or sets the value used for the "birthdate" claim.
            Note: this value should only be populated if the "profile"
            scope was requested and accepted by the resource owner.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleUserinfoRequestContext.Email">
            <summary>
            Gets or sets the value used for the "email" claim.
            Note: this value should only be populated if the "email"
            scope was requested and accepted by the resource owner.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleUserinfoRequestContext.EmailVerified">
            <summary>
            Gets or sets the value used for the "email_verified" claim.
            Note: this value should only be populated if the "email"
            scope was requested and accepted by the resource owner.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleUserinfoRequestContext.FamilyName">
            <summary>
            Gets or sets the value used for the "family_name" claim.
            Note: this value should only be populated if the "profile"
            scope was requested and accepted by the resource owner.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleUserinfoRequestContext.GivenName">
            <summary>
            Gets or sets the value used for the "given_name" claim.
            Note: this value should only be populated if the "profile"
            scope was requested and accepted by the resource owner.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleUserinfoRequestContext.PhoneNumber">
            <summary>
            Gets or sets the value used for the "phone_number" claim.
            Note: this value should only be populated if the "phone"
            scope was requested and accepted by the resource owner.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleUserinfoRequestContext.PhoneNumberVerified">
            <summary>
            Gets or sets the value used for the "phone_number_verified" claim.
            Note: this value should only be populated if the "phone"
            scope was requested and accepted by the resource owner.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleUserinfoRequestContext.PreferredUsername">
            <summary>
            Gets or sets the value used for the "preferred_username" claim.
            Note: this value should only be populated if the "profile"
            scope was requested and accepted by the resource owner.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleUserinfoRequestContext.Profile">
            <summary>
            Gets or sets the value used for the "profile" claim.
            Note: this value should only be populated if the "profile"
            scope was requested and accepted by the resource owner.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleUserinfoRequestContext.Subject">
            <summary>
            Gets or sets the unique value
            used for the mandatory "sub" claim.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.HandleUserinfoRequestContext.Website">
            <summary>
            Gets or sets the value used for the "website" claim.
            Note: this value should only be populated if the "profile"
            scope was requested and accepted by the resource owner.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerEvents.ApplyUserinfoResponseContext">
            <summary>
            Represents an event called before the userinfo response is returned to the caller.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerEvents.ApplyUserinfoResponseContext.#ctor(OpenIddict.Server.OpenIddictServerTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerEvents.ApplyUserinfoResponseContext"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyUserinfoResponseContext.Request">
            <summary>
            Gets or sets the request, or <c>null</c> if it couldn't be extracted.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyUserinfoResponseContext.Response">
            <summary>
            Gets or sets the response.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerEvents.ApplyUserinfoResponseContext.Error">
            <summary>
            Gets the error code returned to the client application.
            When the response indicates a successful response,
            this property returns <c>null</c>.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerFactory.#ctor(Microsoft.Extensions.Localization.IStringLocalizer{OpenIddict.Abstractions.OpenIddictResources},Microsoft.Extensions.Logging.ILogger{OpenIddict.Server.OpenIddictServerDispatcher},Microsoft.Extensions.Options.IOptionsMonitor{OpenIddict.Server.OpenIddictServerOptions})">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerDispatcher"/> class.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandler`1">
            <summary>
            Represents a handler able to process <typeparamref name="TContext"/> events.
            </summary>
            <typeparam name="TContext">The type of the events handled by this instance.</typeparam>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandler`1.#ctor(System.Func{`0,System.Threading.Tasks.ValueTask})">
            <summary>
            Creates a new event using the specified handler delegate.
            </summary>
            <param name="handler">The event handler delegate.</param>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandler`1.HandleAsync(`0)">
            <summary>
            Processes the event.
            </summary>
            <param name="context">The event to process.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerDescriptor">
            <summary>
            Represents an immutable descriptor of an OpenIddict server event handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlerDescriptor.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Server.OpenIddictServerHandlerDescriptor"/> class.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlerDescriptor.ContextType">
            <summary>
            Gets the context type associated with the event.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlerDescriptor.FilterTypes">
            <summary>
            Gets the list of filters responsible of excluding the handler
            from the activated handlers if it doesn't meet the criteria.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlerDescriptor.Order">
            <summary>
            Gets the order assigned to the handler.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlerDescriptor.ServiceDescriptor">
            <summary>
            Gets the service descriptor associated with the handler.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlerDescriptor.Type">
            <summary>
            Gets the type associated with the handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlerDescriptor.CreateBuilder``1">
            <summary>
            Creates a builder allowing to initialize an immutable descriptor.
            </summary>
            <typeparam name="TContext">The event context type.</typeparam>
            <returns>A new descriptor builder.</returns>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerDescriptor.Builder`1">
            <summary>
            Contains methods allowing to build a descriptor instance.
            </summary>
            <typeparam name="TContext">The event context type.</typeparam>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlerDescriptor.Builder`1.AddFilter(System.Type)">
            <summary>
            Adds the type of a handler filter to the filters list.
            </summary>
            <param name="type">The event handler filter type.</param>
            <returns>The builder instance, so that calls can be easily chained.</returns>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlerDescriptor.Builder`1.AddFilter``1">
            <summary>
            Adds the type of a handler filter to the filters list.
            </summary>
            <typeparam name="TFilter">The event handler filter type.</typeparam>
            <returns>The builder instance, so that calls can be easily chained.</returns>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlerDescriptor.Builder`1.SetServiceDescriptor(Microsoft.Extensions.DependencyInjection.ServiceDescriptor)">
            <summary>
            Sets the service descriptor.
            </summary>
            <param name="descriptor">The service descriptor.</param>
            <returns>The builder instance, so that calls can be easily chained.</returns>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlerDescriptor.Builder`1.SetOrder(System.Int32)">
            <summary>
            Sets the order in which the event handler will be invoked.
            </summary>
            <param name="order">The handler order.</param>
            <returns>The builder instance, so that calls can be easily chained.</returns>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlerDescriptor.Builder`1.SetType(OpenIddict.Server.OpenIddictServerHandlerType)">
            <summary>
            Sets the type associated to the handler.
            </summary>
            <param name="type">The handler type.</param>
            <returns>The builder instance, so that calls can be easily chained.</returns>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlerDescriptor.Builder`1.UseInlineHandler(System.Func{`0,System.Threading.Tasks.ValueTask})">
            <summary>
            Configures the descriptor to use the specified inline handler.
            </summary>
            <param name="handler">The handler instance.</param>
            <returns>The builder instance, so that calls can be easily chained.</returns>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlerDescriptor.Builder`1.UseScopedHandler``1">
            <summary>
            Configures the descriptor to use the specified scoped handler.
            </summary>
            <typeparam name="THandler">The handler type.</typeparam>
            <returns>The builder instance, so that calls can be easily chained.</returns>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlerDescriptor.Builder`1.UseSingletonHandler``1">
            <summary>
            Configures the descriptor to use the specified singleton handler.
            </summary>
            <typeparam name="THandler">The handler type.</typeparam>
            <returns>The builder instance, so that calls can be easily chained.</returns>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlerDescriptor.Builder`1.UseSingletonHandler``1(``0)">
            <summary>
            Configures the descriptor to use the specified singleton handler.
            </summary>
            <typeparam name="THandler">The handler type.</typeparam>
            <param name="handler">The handler instance.</param>
            <returns>The builder instance, so that calls can be easily chained.</returns>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlerDescriptor.Builder`1.Build">
            <summary>
            Build a new descriptor instance, based on the parameters that were previously set.
            </summary>
            <returns>The builder instance, so that calls can be easily chained.</returns>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerFilters.RequireAccessTokenGenerated">
            <summary>
            Represents a filter that excludes the associated handlers if no access token is generated.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerFilters.RequireAuthorizationCodeGenerated">
            <summary>
            Represents a filter that excludes the associated handlers if no authorization code is generated.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerFilters.RequireAuthorizationRequest">
            <summary>
            Represents a filter that excludes the associated handlers if the request is not an authorization request.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerFilters.RequireAuthorizationStorageEnabled">
            <summary>
            Represents a filter that excludes the associated handlers if authorization storage was not enabled.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerFilters.RequireClientIdParameter">
            <summary>
            Represents a filter that excludes the associated handlers when no client identifier is received.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerFilters.RequireConfigurationRequest">
            <summary>
            Represents a filter that excludes the associated handlers if the request is not a configuration request.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerFilters.RequireCryptographyRequest">
            <summary>
            Represents a filter that excludes the associated handlers if the request is not a cryptography request.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerFilters.RequireDegradedModeDisabled">
            <summary>
            Represents a filter that excludes the associated handlers if the degraded mode was not enabled.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerFilters.RequireDeviceCodeGenerated">
            <summary>
            Represents a filter that excludes the associated handlers if no device code is generated.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerFilters.RequireDeviceRequest">
            <summary>
            Represents a filter that excludes the associated handlers if the request is not a device request.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerFilters.RequireEndpointPermissionsEnabled">
            <summary>
            Represents a filter that excludes the associated handlers if endpoint permissions were disabled.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerFilters.RequireGrantTypePermissionsEnabled">
            <summary>
            Represents a filter that excludes the associated handlers if grant type permissions were disabled.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerFilters.RequireIdentityTokenGenerated">
            <summary>
            Represents a filter that excludes the associated handlers if no identity token is generated.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerFilters.RequireIntrospectionRequest">
            <summary>
            Represents a filter that excludes the associated handlers if the request is not an introspection request.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerFilters.RequireLogoutRequest">
            <summary>
            Represents a filter that excludes the associated handlers if the request is not a logout request.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerFilters.RequirePostLogoutRedirectUriParameter">
            <summary>
            Represents a filter that excludes the associated handlers when no post_logout_redirect_uri is received.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerFilters.RequireReferenceAccessTokensEnabled">
            <summary>
            Represents a filter that excludes the associated handlers if reference access tokens are disabled.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerFilters.RequireReferenceRefreshTokensEnabled">
            <summary>
            Represents a filter that excludes the associated handlers if reference refresh tokens are disabled.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerFilters.RequireRefreshTokenGenerated">
            <summary>
            Represents a filter that excludes the associated handlers if no refresh token is generated.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerFilters.RequireResponseTypePermissionsEnabled">
            <summary>
            Represents a filter that excludes the associated handlers if response type permissions were disabled.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerFilters.RequireRevocationRequest">
            <summary>
            Represents a filter that excludes the associated handlers if the request is not a revocation request.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerFilters.RequireScopePermissionsEnabled">
            <summary>
            Represents a filter that excludes the associated handlers if scope permissions were disabled.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerFilters.RequireScopeValidationEnabled">
            <summary>
            Represents a filter that excludes the associated handlers if scope validation was not enabled.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerFilters.RequireSlidingRefreshTokenExpirationEnabled">
            <summary>
            Represents a filter that excludes the associated handlers if sliding refresh token expiration was disabled.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerFilters.RequireTokenRequest">
            <summary>
            Represents a filter that excludes the associated handlers if the request is not a token request.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerFilters.RequireTokenStorageEnabled">
            <summary>
            Represents a filter that excludes the associated handlers if token storage was not enabled.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerFilters.RequireUserCodeGenerated">
            <summary>
            Represents a filter that excludes the associated handlers if no user code is generated.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerFilters.RequireUserinfoRequest">
            <summary>
            Represents a filter that excludes the associated handlers if the request is not a userinfo request.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerFilters.RequireVerificationRequest">
            <summary>
            Represents a filter that excludes the associated handlers if the request is not a verification request.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ExtractAuthorizationRequest">
            <summary>
            Contains the logic responsible of extracting authorization requests and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ExtractAuthorizationRequest.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ExtractAuthorizationRequest.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateAuthorizationRequest">
            <summary>
            Contains the logic responsible of validating authorization requests and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateAuthorizationRequest.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateAuthorizationRequest.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Authentication.HandleAuthorizationRequest">
            <summary>
            Contains the logic responsible of handling authorization requests and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Authentication.HandleAuthorizationRequest.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Authentication.HandleAuthorizationRequest.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ApplyAuthorizationResponse`1">
            <summary>
            Contains the logic responsible of processing sign-in responses and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ApplyAuthorizationResponse`1.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ApplyAuthorizationResponse`1.HandleAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateRequestParameter">
            <summary>
            Contains the logic responsible of rejecting authorization requests that specify the unsupported request parameter.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateRequestParameter.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateRequestParameter.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateAuthorizationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateRequestUriParameter">
            <summary>
            Contains the logic responsible of rejecting authorization requests that specify the unsupported request_uri parameter.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateRequestUriParameter.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateRequestUriParameter.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateAuthorizationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateClientIdParameter">
            <summary>
            Contains the logic responsible of rejecting authorization requests that lack the mandatory client_id parameter.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateClientIdParameter.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateClientIdParameter.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateAuthorizationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateRedirectUriParameter">
            <summary>
            Contains the logic responsible of rejecting authorization requests that lack the mandatory redirect_uri parameter.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateRedirectUriParameter.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateRedirectUriParameter.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateAuthorizationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateResponseTypeParameter">
            <summary>
            Contains the logic responsible of rejecting authorization requests that specify an invalid response_type parameter.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateResponseTypeParameter.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateResponseTypeParameter.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateAuthorizationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateResponseModeParameter">
            <summary>
            Contains the logic responsible of rejecting authorization requests that specify an invalid response_mode parameter.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateResponseModeParameter.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateResponseModeParameter.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateAuthorizationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateScopeParameter">
            <summary>
            Contains the logic responsible of rejecting authorization requests that don't specify a valid scope parameter.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateScopeParameter.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateScopeParameter.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateAuthorizationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateNonceParameter">
            <summary>
            Contains the logic responsible of rejecting authorization requests that don't specify a nonce.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateNonceParameter.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateNonceParameter.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateAuthorizationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidatePromptParameter">
            <summary>
            Contains the logic responsible of rejecting authorization requests that don't specify a valid prompt parameter.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidatePromptParameter.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidatePromptParameter.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateAuthorizationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateProofKeyForCodeExchangeParameters">
            <summary>
            Contains the logic responsible of rejecting authorization requests that don't specify valid PKCE parameters.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateProofKeyForCodeExchangeParameters.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateProofKeyForCodeExchangeParameters.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateAuthorizationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateClientId">
            <summary>
            Contains the logic responsible of rejecting authorization requests that use an invalid client_id.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateClientId.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateClientId.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateAuthorizationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateClientType">
            <summary>
            Contains the logic responsible of rejecting authorization requests that use a
            response_type containing token if the application is a confidential client.
            Note: this handler is not used when the degraded mode is enabled
            or when response type permissions enforcement is not disabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateClientType.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateClientType.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateAuthorizationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateClientRedirectUri">
            <summary>
            Contains the logic responsible of rejecting authorization requests that use an invalid redirect_uri.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateClientRedirectUri.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateClientRedirectUri.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateAuthorizationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateScopes">
            <summary>
            Contains the logic responsible of rejecting authorization requests that use unregistered scopes.
            Note: this handler partially works with the degraded mode but is not used when scope validation is disabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateScopes.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateScopes.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateAuthorizationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateEndpointPermissions">
            <summary>
            Contains the logic responsible of rejecting authorization requests made by unauthorized applications.
            Note: this handler is not used when the degraded mode is enabled or when endpoint permissions are disabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateEndpointPermissions.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateEndpointPermissions.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateAuthorizationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateGrantTypePermissions">
            <summary>
            Contains the logic responsible of rejecting authorization requests made by unauthorized applications.
            Note: this handler is not used when the degraded mode is enabled or when grant type permissions are disabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateGrantTypePermissions.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateGrantTypePermissions.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateAuthorizationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateResponseTypePermissions">
            <summary>
            Contains the logic responsible of rejecting authorization requests made by unauthorized applications.
            Note: this handler is not used when the degraded mode is enabled or when grant type permissions are disabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateResponseTypePermissions.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateResponseTypePermissions.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateAuthorizationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateScopePermissions">
            <summary>
            Contains the logic responsible of rejecting authorization requests made by unauthorized applications.
            Note: this handler is not used when the degraded mode is enabled or when scope permissions are disabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateScopePermissions.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateScopePermissions.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateAuthorizationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateProofKeyForCodeExchangeRequirement">
            <summary>
            Contains the logic responsible of rejecting authorization requests made by
            applications for which proof key for code exchange (PKCE) was enforced.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateProofKeyForCodeExchangeRequirement.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Authentication.ValidateProofKeyForCodeExchangeRequirement.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateAuthorizationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Authentication.AttachRedirectUri">
            <summary>
            Contains the logic responsible of inferring the redirect URL
            used to send the response back to the client application.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Authentication.AttachRedirectUri.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Authentication.AttachRedirectUri.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ApplyAuthorizationResponseContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Authentication.InferResponseMode">
            <summary>
            Contains the logic responsible of inferring the response mode
            used to send the response back to the client application.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Authentication.InferResponseMode.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Authentication.InferResponseMode.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ApplyAuthorizationResponseContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Authentication.AttachResponseState">
            <summary>
            Contains the logic responsible of attaching the state to the response.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Authentication.AttachResponseState.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Authentication.AttachResponseState.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ApplyAuthorizationResponseContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.ValidateAuthenticationDemand">
            <summary>
            Contains the logic responsible of rejecting authentication demands made from unsupported endpoints.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.ValidateAuthenticationDemand.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.ValidateAuthenticationDemand.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessAuthenticationContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.ValidateTokenParameter">
            <summary>
            Contains the logic responsible of resolving the token from the incoming request.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.ValidateTokenParameter.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.ValidateTokenParameter.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessAuthenticationContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.NormalizeUserCode">
            <summary>
            Contains the logic responsible of normalizing user codes.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.NormalizeUserCode.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.NormalizeUserCode.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessAuthenticationContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.ValidateReferenceTokenIdentifier">
            <summary>
            Contains the logic responsible of validating reference token identifiers.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.ValidateReferenceTokenIdentifier.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.ValidateIdentityModelToken">
            <summary>
            Contains the logic responsible of validating tokens generated using IdentityModel.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.ValidateIdentityModelToken.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.ValidateIdentityModelToken.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessAuthenticationContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.NormalizeScopeClaims">
            <summary>
            Contains the logic responsible of normalizing the scope claims stored in the tokens.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.NormalizeScopeClaims.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.NormalizeScopeClaims.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessAuthenticationContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.MapInternalClaims">
            <summary>
            Contains the logic responsible of mapping internal claims used by OpenIddict.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.MapInternalClaims.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.MapInternalClaims.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessAuthenticationContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.RestoreReferenceTokenProperties">
            <summary>
            Contains the logic responsible of restoring the properties associated with a reference token entry.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.RestoreReferenceTokenProperties.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.ValidatePrincipal">
            <summary>
            Contains the logic responsible of rejecting authentication demands for which no valid principal was resolved.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.ValidatePrincipal.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.ValidatePrincipal.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessAuthenticationContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.ValidateTokenEntry">
            <summary>
            Contains the logic responsible of rejecting authentication demands that
            use a token whose entry is no longer valid (e.g was revoked).
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.ValidateTokenEntry.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.ValidateAuthorizationEntry">
            <summary>
            Contains the logic responsible of authentication demands a token whose
            associated authorization entry is no longer valid (e.g was revoked).
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.ValidateAuthorizationEntry.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.ValidateExpirationDate">
            <summary>
            Contains the logic responsible of rejecting authentication demands that use an expired token.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.ValidateExpirationDate.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.ValidateExpirationDate.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessAuthenticationContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.ValidateChallengeDemand">
            <summary>
            Contains the logic responsible of rejecting challenge demands made from unsupported endpoints.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.ValidateChallengeDemand.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.ValidateChallengeDemand.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessChallengeContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.AttachDefaultChallengeError">
            <summary>
            Contains the logic responsible of ensuring that the challenge response contains an appropriate error.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.AttachDefaultChallengeError.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.AttachDefaultChallengeError.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessChallengeContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.RejectDeviceCodeEntry">
            <summary>
            Contains the logic responsible of rejecting the device code entry associated with the user code.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.RejectDeviceCodeEntry.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.RejectDeviceCodeEntry.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessChallengeContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.RejectUserCodeEntry">
            <summary>
            Contains the logic responsible of rejecting the user code entry, if applicable.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.RejectUserCodeEntry.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.RejectUserCodeEntry.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessChallengeContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.ValidateSignInDemand">
            <summary>
            Contains the logic responsible of ensuring that the sign-in demand
            is compatible with the type of the endpoint that handled the request.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.ValidateSignInDemand.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.ValidateSignInDemand.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.RestoreInternalClaims">
            <summary>
            Contains the logic responsible of re-attaching internal claims to the authentication principal.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.RestoreInternalClaims.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.RestoreInternalClaims.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.AttachDefaultScopes">
            <summary>
            Contains the logic responsible of attaching default scopes to the authentication principal.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.AttachDefaultScopes.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.AttachDefaultScopes.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.AttachDefaultPresenters">
            <summary>
            Contains the logic responsible of attaching default presenters to the authentication principal.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.AttachDefaultPresenters.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.AttachDefaultPresenters.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.InferResources">
            <summary>
            Contains the logic responsible of inferring resources from the audience claims if necessary.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.InferResources.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.InferResources.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.EvaluateTokenTypes">
            <summary>
            Contains the logic responsible of selecting the token types that
            should be generated and optionally returned in the response.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.EvaluateTokenTypes.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.EvaluateTokenTypes.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.AttachAuthorization">
            <summary>
            Contains the logic responsible of creating an ad-hoc authorization, if necessary.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.AttachAuthorization.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.AttachAuthorization.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.PrepareAccessTokenPrincipal">
            <summary>
            Contains the logic responsible of preparing and attaching the claims principal
            used to generate the access token, if one is going to be returned.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.PrepareAccessTokenPrincipal.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.PrepareAccessTokenPrincipal.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.PrepareAuthorizationCodePrincipal">
            <summary>
            Contains the logic responsible of preparing and attaching the claims principal
            used to generate the authorization code, if one is going to be returned.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.PrepareAuthorizationCodePrincipal.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.PrepareAuthorizationCodePrincipal.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.PrepareDeviceCodePrincipal">
            <summary>
            Contains the logic responsible of preparing and attaching the claims principal
            used to generate the device code, if one is going to be returned.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.PrepareDeviceCodePrincipal.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.PrepareDeviceCodePrincipal.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.PrepareRefreshTokenPrincipal">
            <summary>
            Contains the logic responsible of preparing and attaching the claims principal
            used to generate the refresh token, if one is going to be returned.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.PrepareRefreshTokenPrincipal.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.PrepareRefreshTokenPrincipal.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.PrepareIdentityTokenPrincipal">
            <summary>
            Contains the logic responsible of preparing and attaching the claims principal
            used to generate the identity token, if one is going to be returned.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.PrepareIdentityTokenPrincipal.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.PrepareIdentityTokenPrincipal.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.PrepareUserCodePrincipal">
            <summary>
            Contains the logic responsible of preparing and attaching the claims principal
            used to generate the user code, if one is going to be returned.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.PrepareUserCodePrincipal.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.PrepareUserCodePrincipal.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.RedeemTokenEntry">
            <summary>
            Contains the logic responsible of redeeming the token entry corresponding to
            the received authorization code, device code, user code or refresh token.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.RedeemTokenEntry.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.RedeemTokenEntry.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.CreateAccessTokenEntry">
            <summary>
            Contains the logic responsible of creating an access token entry.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.CreateAccessTokenEntry.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.CreateAccessTokenEntry.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.GenerateIdentityModelAccessToken">
            <summary>
            Contains the logic responsible of generating an access token using IdentityModel.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.GenerateIdentityModelAccessToken.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.GenerateIdentityModelAccessToken.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.ConvertReferenceAccessToken">
            <summary>
            Contains the logic responsible of converting the access token to a reference token.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.ConvertReferenceAccessToken.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.ConvertReferenceAccessToken.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.CreateAuthorizationCodeEntry">
            <summary>
            Contains the logic responsible of creating an authorization code entry.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.CreateAuthorizationCodeEntry.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.CreateAuthorizationCodeEntry.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.GenerateIdentityModelAuthorizationCode">
            <summary>
            Contains the logic responsible of generating an authorization code using IdentityModel.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.GenerateIdentityModelAuthorizationCode.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.GenerateIdentityModelAuthorizationCode.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.ConvertReferenceAuthorizationCode">
            <summary>
            Contains the logic responsible of converting the authorization code to a reference token.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.ConvertReferenceAuthorizationCode.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.ConvertReferenceAuthorizationCode.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.CreateDeviceCodeEntry">
            <summary>
            Contains the logic responsible of creating an access token entry.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.CreateDeviceCodeEntry.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.CreateDeviceCodeEntry.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.GenerateIdentityModelDeviceCode">
            <summary>
            Contains the logic responsible of generating a device code using IdentityModel.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.GenerateIdentityModelDeviceCode.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.GenerateIdentityModelDeviceCode.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.ConvertReferenceDeviceCode">
            <summary>
            Contains the logic responsible of creating a reference device code entry.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.ConvertReferenceDeviceCode.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.ConvertReferenceDeviceCode.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.UpdateReferenceDeviceCodeEntry">
            <summary>
            Contains the logic responsible of updating the existing reference device code entry.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.UpdateReferenceDeviceCodeEntry.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.UpdateReferenceDeviceCodeEntry.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.CreateRefreshTokenEntry">
            <summary>
            Contains the logic responsible of creating a refresh token entry.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.CreateRefreshTokenEntry.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.CreateRefreshTokenEntry.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.GenerateIdentityModelRefreshToken">
            <summary>
            Contains the logic responsible of generating a refresh token using IdentityModel.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.GenerateIdentityModelRefreshToken.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.GenerateIdentityModelRefreshToken.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.ConvertReferenceRefreshToken">
            <summary>
            Contains the logic responsible of converting the refresh token to a reference token.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.ConvertReferenceRefreshToken.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.ConvertReferenceRefreshToken.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.AttachDeviceCodeIdentifier">
            <summary>
            Contains the logic responsible of generating and attaching the device code identifier to the user code principal.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.AttachDeviceCodeIdentifier.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.AttachDeviceCodeIdentifier.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.CreateUserCodeEntry">
            <summary>
            Contains the logic responsible of creating a user code entry.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.CreateUserCodeEntry.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.CreateUserCodeEntry.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.GenerateIdentityModelUserCode">
            <summary>
            Contains the logic responsible of generating a user code using IdentityModel.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.GenerateIdentityModelUserCode.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.GenerateIdentityModelUserCode.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.ConvertReferenceUserCode">
            <summary>
            Contains the logic responsible of converting the user code to a reference token.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.ConvertReferenceUserCode.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.ConvertReferenceUserCode.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.AttachTokenDigests">
            <summary>
            Contains the logic responsible of generating and attaching the hashes of
            the access token and authorization code to the identity token principal.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.AttachTokenDigests.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.AttachTokenDigests.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.CreateIdentityTokenEntry">
            <summary>
            Contains the logic responsible of creating an identity token entry.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.CreateIdentityTokenEntry.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.CreateIdentityTokenEntry.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.GenerateIdentityModelIdentityToken">
            <summary>
            Contains the logic responsible of generating an identity token using IdentityModel.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.GenerateIdentityModelIdentityToken.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.GenerateIdentityModelIdentityToken.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.BeautifyUserCode">
            <summary>
            Contains the logic responsible of beautifying the user code returned to the client.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.BeautifyUserCode.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.BeautifyUserCode.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.AttachTokenParameters">
            <summary>
            Contains the logic responsible of attaching the tokens and their metadata to the sign-in response.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.AttachTokenParameters.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.AttachTokenParameters.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignInContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.ValidateSignOutDemand">
            <summary>
            Contains the logic responsible of ensuring that the sign-out demand
            is compatible with the type of the endpoint that handled the request.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.ValidateSignOutDemand.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.ValidateSignOutDemand.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessSignOutContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Device.ExtractDeviceRequest">
            <summary>
            Contains the logic responsible of extracting device requests and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Device.ExtractDeviceRequest.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Device.ExtractDeviceRequest.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Device.ValidateDeviceRequest">
            <summary>
            Contains the logic responsible of validating device requests and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Device.ValidateDeviceRequest.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Device.ValidateDeviceRequest.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Device.HandleDeviceRequest">
            <summary>
            Contains the logic responsible of handling device requests and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Device.HandleDeviceRequest.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Device.HandleDeviceRequest.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Device.ApplyDeviceResponse`1">
            <summary>
            Contains the logic responsible of processing sign-in responses and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Device.ApplyDeviceResponse`1.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Device.ApplyDeviceResponse`1.HandleAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Device.ValidateClientIdParameter">
            <summary>
            Contains the logic responsible of rejecting device requests that don't specify a client identifier.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Device.ValidateClientIdParameter.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Device.ValidateClientIdParameter.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateDeviceRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Device.ValidateScopes">
            <summary>
            Contains the logic responsible of rejecting authorization requests that use unregistered scopes.
            Note: this handler partially works with the degraded mode but is not used when scope validation is disabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Device.ValidateScopes.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Device.ValidateScopes.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateDeviceRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Device.ValidateClientId">
            <summary>
            Contains the logic responsible of rejecting device requests that use an invalid client_id.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Device.ValidateClientId.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Device.ValidateClientId.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateDeviceRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Device.ValidateClientType">
            <summary>
            Contains the logic responsible of rejecting device requests made by applications
            whose client type is not compatible with the requested grant type.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Device.ValidateClientType.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Device.ValidateClientType.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateDeviceRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Device.ValidateClientSecret">
            <summary>
            Contains the logic responsible of rejecting device requests specifying an invalid client secret.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Device.ValidateClientSecret.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Device.ValidateClientSecret.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateDeviceRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Device.ValidateEndpointPermissions">
            <summary>
            Contains the logic responsible of rejecting device requests made by
            applications that haven't been granted the device endpoint permission.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Device.ValidateEndpointPermissions.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Device.ValidateEndpointPermissions.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateDeviceRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Device.ValidateScopePermissions">
            <summary>
            Contains the logic responsible of rejecting device requests made by applications
            that haven't been granted the appropriate grant type permission.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Device.ValidateScopePermissions.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Device.ValidateScopePermissions.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateDeviceRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Device.ExtractVerificationRequest">
            <summary>
            Contains the logic responsible of extracting verification requests and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Device.ExtractVerificationRequest.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Device.ExtractVerificationRequest.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Device.ValidateVerificationRequest">
            <summary>
            Contains the logic responsible of validating verification requests and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Device.ValidateVerificationRequest.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Device.ValidateVerificationRequest.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Device.HandleVerificationRequest">
            <summary>
            Contains the logic responsible of handling verification requests and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Device.HandleVerificationRequest.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Device.HandleVerificationRequest.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Device.ApplyVerificationResponse`1">
            <summary>
            Contains the logic responsible of processing sign-in responses and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Device.ApplyVerificationResponse`1.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Device.ApplyVerificationResponse`1.HandleAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Device.AttachUserCodePrincipal">
            <summary>
            Contains the logic responsible of attaching the claims principal resolved from the user code.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Device.AttachUserCodePrincipal.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Device.AttachUserCodePrincipal.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.HandleVerificationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Discovery.ExtractConfigurationRequest">
            <summary>
            Contains the logic responsible of extracting configuration requests and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Discovery.ExtractConfigurationRequest.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Discovery.ExtractConfigurationRequest.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Discovery.ValidateConfigurationRequest">
            <summary>
            Contains the logic responsible of validating configuration requests and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Discovery.ValidateConfigurationRequest.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Discovery.ValidateConfigurationRequest.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Discovery.HandleConfigurationRequest">
            <summary>
            Contains the logic responsible of handling configuration requests and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Discovery.HandleConfigurationRequest.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Discovery.HandleConfigurationRequest.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Discovery.ApplyConfigurationResponse`1">
            <summary>
            Contains the logic responsible of processing configuration responses and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Discovery.ApplyConfigurationResponse`1.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Discovery.ApplyConfigurationResponse`1.HandleAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachEndpoints">
            <summary>
            Contains the logic responsible of attaching the endpoint URLs to the provider discovery document.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachEndpoints.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachEndpoints.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachGrantTypes">
            <summary>
            Contains the logic responsible of attaching the supported grant types to the provider discovery document.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachGrantTypes.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachGrantTypes.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachResponseModes">
            <summary>
            Contains the logic responsible of attaching the supported response modes to the provider discovery document.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachResponseModes.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachResponseModes.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachResponseTypes">
            <summary>
            Contains the logic responsible of attaching the supported response types to the provider discovery document.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachResponseTypes.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachResponseTypes.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachClientAuthenticationMethods">
            <summary>
            Contains the logic responsible of attaching the supported client
            authentication methods to the provider discovery document.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachClientAuthenticationMethods.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachClientAuthenticationMethods.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachCodeChallengeMethods">
            <summary>
            Contains the logic responsible of attaching the supported
            code challenge methods to the provider discovery document.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachCodeChallengeMethods.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachCodeChallengeMethods.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachScopes">
            <summary>
            Contains the logic responsible of attaching the supported response types to the provider discovery document.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachScopes.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachScopes.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachClaims">
            <summary>
            Contains the logic responsible of attaching the supported claims to the provider discovery document.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachClaims.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachClaims.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachSubjectTypes">
            <summary>
            Contains the logic responsible of attaching the supported subject types to the provider discovery document.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachSubjectTypes.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachSubjectTypes.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachSigningAlgorithms">
            <summary>
            Contains the logic responsible of attaching the supported signing algorithms to the provider discovery document.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachSigningAlgorithms.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachSigningAlgorithms.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachAdditionalMetadata">
            <summary>
            Contains the logic responsible of attaching additional metadata to the provider discovery document.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachAdditionalMetadata.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachAdditionalMetadata.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.HandleConfigurationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Discovery.ExtractCryptographyRequest">
            <summary>
            Contains the logic responsible of extracting cryptography requests and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Discovery.ExtractCryptographyRequest.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Discovery.ExtractCryptographyRequest.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Discovery.ValidateCryptographyRequest">
            <summary>
            Contains the logic responsible of validating cryptography requests and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Discovery.ValidateCryptographyRequest.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Discovery.ValidateCryptographyRequest.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Discovery.HandleCryptographyRequest">
            <summary>
            Contains the logic responsible of handling cryptography requests and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Discovery.HandleCryptographyRequest.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Discovery.HandleCryptographyRequest.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Discovery.ApplyCryptographyResponse`1">
            <summary>
            Contains the logic responsible of processing cryptography responses and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Discovery.ApplyCryptographyResponse`1.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Discovery.ApplyCryptographyResponse`1.HandleAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachSigningKeys">
            <summary>
            Contains the logic responsible of attaching the signing keys to the JWKS document.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachSigningKeys.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Discovery.AttachSigningKeys.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.HandleCryptographyRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ExtractTokenRequest">
            <summary>
            Contains the logic responsible of extracting token requests and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ExtractTokenRequest.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ExtractTokenRequest.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateTokenRequest">
            <summary>
            Contains the logic responsible of validating token requests and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateTokenRequest.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateTokenRequest.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Exchange.HandleTokenRequest">
            <summary>
            Contains the logic responsible of handling token requests and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Exchange.HandleTokenRequest.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Exchange.HandleTokenRequest.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ApplyTokenResponse`1">
            <summary>
            Contains the logic responsible of processing sign-in responses and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ApplyTokenResponse`1.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ApplyTokenResponse`1.HandleAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateGrantType">
            <summary>
            Contains the logic responsible of rejecting token requests that specify an invalid grant type.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateGrantType.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateGrantType.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateTokenRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateClientIdParameter">
            <summary>
            Contains the logic responsible of rejecting token requests that don't specify a client identifier.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateClientIdParameter.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateClientIdParameter.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateTokenRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateAuthorizationCodeParameter">
            <summary>
            Contains the logic responsible of rejecting token requests that don't
            specify an authorization code for the authorization code grant type.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateAuthorizationCodeParameter.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateAuthorizationCodeParameter.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateTokenRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateClientCredentialsParameters">
            <summary>
            Contains the logic responsible of rejecting token requests that don't
            specify client credentials for the client credentials grant type.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateClientCredentialsParameters.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateClientCredentialsParameters.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateTokenRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateDeviceCodeParameter">
            <summary>
            Contains the logic responsible of rejecting token requests that
            don't specify a device code for the device code grant type.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateDeviceCodeParameter.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateDeviceCodeParameter.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateTokenRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateRefreshTokenParameter">
            <summary>
            Contains the logic responsible of rejecting token requests that
            specify invalid parameters for the refresh token grant type.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateRefreshTokenParameter.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateRefreshTokenParameter.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateTokenRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateResourceOwnerCredentialsParameters">
            <summary>
            Contains the logic responsible of rejecting token requests
            that specify invalid parameters for the password grant type.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateResourceOwnerCredentialsParameters.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateResourceOwnerCredentialsParameters.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateTokenRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateProofKeyForCodeExchangeParameters">
            <summary>
            Contains the logic responsible of rejecting token requests that don't specify valid PKCE parameters.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateProofKeyForCodeExchangeParameters.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateProofKeyForCodeExchangeParameters.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateTokenRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateScopes">
            <summary>
            Contains the logic responsible of rejecting authorization requests that use unregistered scopes.
            Note: this handler partially works with the degraded mode but is not used when scope validation is disabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateScopes.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateScopes.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateTokenRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateClientId">
            <summary>
            Contains the logic responsible of rejecting token requests that use an invalid client_id.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateClientId.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateClientId.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateTokenRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateClientType">
            <summary>
            Contains the logic responsible of rejecting token requests made by applications
            whose client type is not compatible with the requested grant type.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateClientType.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateClientType.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateTokenRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateClientSecret">
            <summary>
            Contains the logic responsible of rejecting token requests specifying an invalid client secret.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateClientSecret.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateClientSecret.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateTokenRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateEndpointPermissions">
            <summary>
            Contains the logic responsible of rejecting token requests made by
            applications that haven't been granted the token endpoint permission.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateEndpointPermissions.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateEndpointPermissions.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateTokenRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateGrantTypePermissions">
            <summary>
            Contains the logic responsible of rejecting token requests made by applications
            that haven't been granted the appropriate grant type permissions.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateGrantTypePermissions.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateGrantTypePermissions.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateTokenRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateScopePermissions">
            <summary>
            Contains the logic responsible of rejecting token requests made by applications
            that haven't been granted the appropriate grant type permission.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateScopePermissions.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateScopePermissions.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateTokenRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateProofKeyForCodeExchangeRequirement">
            <summary>
            Contains the logic responsible of rejecting token requests made by
            applications for which proof key for code exchange (PKCE) was enforced.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateProofKeyForCodeExchangeRequirement.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateProofKeyForCodeExchangeRequirement.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateTokenRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateToken">
            <summary>
            Contains the logic responsible of rejecting token requests that don't
            specify a valid authorization code, device code or refresh token.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateToken.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateToken.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateTokenRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidatePresenters">
            <summary>
            Contains the logic responsible of rejecting token requests that use an authorization code,
            a device code or a refresh token that was issued for a different client application.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidatePresenters.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidatePresenters.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateTokenRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateRedirectUri">
            <summary>
            Contains the logic responsible of rejecting token requests that specify an invalid redirect_uri.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateRedirectUri.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateRedirectUri.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateTokenRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateCodeVerifier">
            <summary>
            Contains the logic responsible of rejecting token requests that specify an invalid code verifier.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateCodeVerifier.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateCodeVerifier.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateTokenRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateGrantedScopes">
            <summary>
            Contains the logic responsible of rejecting token requests that specify scopes that
            were not initially granted by the resource owner during the authorization request.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateGrantedScopes.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Exchange.ValidateGrantedScopes.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateTokenRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Exchange.AttachPrincipal">
            <summary>
            Contains the logic responsible of attaching the principal extracted
            from the authorization code/refresh token to the event context.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Exchange.AttachPrincipal.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Exchange.AttachPrincipal.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.HandleTokenRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ExtractIntrospectionRequest">
            <summary>
            Contains the logic responsible of extracting introspection requests and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ExtractIntrospectionRequest.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ExtractIntrospectionRequest.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ValidateIntrospectionRequest">
            <summary>
            Contains the logic responsible of validating introspection requests and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ValidateIntrospectionRequest.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ValidateIntrospectionRequest.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Introspection.HandleIntrospectionRequest">
            <summary>
            Contains the logic responsible of handling introspection requests and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Introspection.HandleIntrospectionRequest.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Introspection.HandleIntrospectionRequest.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ApplyIntrospectionResponse`1">
            <summary>
            Contains the logic responsible of processing sign-in responses and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ApplyIntrospectionResponse`1.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ApplyIntrospectionResponse`1.HandleAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ValidateTokenParameter">
            <summary>
            Contains the logic responsible of rejecting introspection requests that don't specify a token.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ValidateTokenParameter.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ValidateTokenParameter.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateIntrospectionRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ValidateClientIdParameter">
            <summary>
            Contains the logic responsible of rejecting introspection requests that don't specify a client identifier.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ValidateClientIdParameter.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ValidateClientIdParameter.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateIntrospectionRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ValidateClientId">
            <summary>
            Contains the logic responsible of rejecting introspection requests that use an invalid client_id.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ValidateClientId.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ValidateClientId.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateIntrospectionRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ValidateClientType">
            <summary>
            Contains the logic responsible of rejecting introspection requests made by applications
            whose client type is not compatible with the presence or absence of a client secret.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ValidateClientType.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ValidateClientType.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateIntrospectionRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ValidateClientSecret">
            <summary>
            Contains the logic responsible of rejecting introspection requests specifying an invalid client secret.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ValidateClientSecret.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ValidateClientSecret.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateIntrospectionRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ValidateEndpointPermissions">
            <summary>
            Contains the logic responsible of rejecting introspection requests made by
            applications that haven't been granted the introspection endpoint permission.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ValidateEndpointPermissions.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ValidateEndpointPermissions.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateIntrospectionRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ValidateToken">
            <summary>
            Contains the logic responsible of rejecting introspection requests that don't specify a valid token.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ValidateToken.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ValidateToken.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateIntrospectionRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ValidateTokenType">
            <summary>
            Contains the logic responsible of rejecting introspection requests that specify an unsupported token.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ValidateTokenType.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ValidateTokenType.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateIntrospectionRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ValidateAuthorizedParty">
            <summary>
            Contains the logic responsible of rejecting introspection requests that specify a token
            that cannot be introspected by the client application sending the introspection requests.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ValidateAuthorizedParty.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Introspection.ValidateAuthorizedParty.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateIntrospectionRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Introspection.AttachPrincipal">
            <summary>
            Contains the logic responsible of attaching the principal
            extracted from the introspected token to the event context.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Introspection.AttachPrincipal.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Introspection.AttachPrincipal.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.HandleIntrospectionRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Introspection.AttachMetadataClaims">
            <summary>
            Contains the logic responsible of attaching the metadata claims extracted from the token the event context.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Introspection.AttachMetadataClaims.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Introspection.AttachMetadataClaims.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.HandleIntrospectionRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Introspection.AttachApplicationClaims">
            <summary>
            Contains the logic responsible of attaching the application-specific claims extracted from the token the event context.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Introspection.AttachApplicationClaims.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Introspection.AttachApplicationClaims.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.HandleIntrospectionRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Introspection.NormalizeErrorResponse">
            <summary>
            Contains the logic responsible of converting introspection errors to standard active: false responses.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Introspection.NormalizeErrorResponse.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Introspection.NormalizeErrorResponse.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ApplyIntrospectionResponseContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ExtractRevocationRequest">
            <summary>
            Contains the logic responsible of extracting revocation requests and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ExtractRevocationRequest.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ExtractRevocationRequest.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ValidateRevocationRequest">
            <summary>
            Contains the logic responsible of validating revocation requests and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ValidateRevocationRequest.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ValidateRevocationRequest.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Revocation.HandleRevocationRequest">
            <summary>
            Contains the logic responsible of handling revocation requests and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Revocation.HandleRevocationRequest.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Revocation.HandleRevocationRequest.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ApplyRevocationResponse`1">
            <summary>
            Contains the logic responsible of processing sign-in responses and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ApplyRevocationResponse`1.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ApplyRevocationResponse`1.HandleAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ValidateTokenParameter">
            <summary>
            Contains the logic responsible of rejecting revocation requests that don't specify a token.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ValidateTokenParameter.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ValidateTokenParameter.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateRevocationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ValidateClientIdParameter">
            <summary>
            Contains the logic responsible of rejecting revocation requests that don't specify a client identifier.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ValidateClientIdParameter.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ValidateClientIdParameter.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateRevocationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ValidateClientId">
            <summary>
            Contains the logic responsible of rejecting revocation requests that use an invalid client_id.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ValidateClientId.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ValidateClientId.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateRevocationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ValidateClientType">
            <summary>
            Contains the logic responsible of rejecting revocation requests made by applications
            whose client type is not compatible with the presence or absence of a client secret.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ValidateClientType.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ValidateClientType.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateRevocationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ValidateClientSecret">
            <summary>
            Contains the logic responsible of rejecting revocation requests specifying an invalid client secret.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ValidateClientSecret.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ValidateClientSecret.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateRevocationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ValidateEndpointPermissions">
            <summary>
            Contains the logic responsible of rejecting revocation requests made by
            applications that haven't been granted the revocation endpoint permission.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ValidateEndpointPermissions.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ValidateEndpointPermissions.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateRevocationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ValidateToken">
            <summary>
            Contains the logic responsible of rejecting revocation requests that don't specify a valid token.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ValidateToken.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ValidateToken.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateRevocationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ValidateTokenType">
            <summary>
            Contains the logic responsible of rejecting revocation requests that specify an unsupported token.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ValidateTokenType.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ValidateTokenType.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateRevocationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ValidateAuthorizedParty">
            <summary>
            Contains the logic responsible of rejecting revocation requests that specify a token
            that cannot be revoked by the client application sending the revocation requests.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ValidateAuthorizedParty.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Revocation.ValidateAuthorizedParty.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateRevocationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Revocation.AttachPrincipal">
            <summary>
            Contains the logic responsible of attaching the principal
            extracted from the revoked token to the event context.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Revocation.AttachPrincipal.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Revocation.AttachPrincipal.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.HandleRevocationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Revocation.RevokeToken">
            <summary>
            Contains the logic responsible of revoking the token sent by the client application.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Revocation.RevokeToken.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Revocation.RevokeToken.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.HandleRevocationRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Revocation.NormalizeErrorResponse">
            <summary>
            Contains the logic responsible of converting revocation errors to standard empty responses.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Revocation.NormalizeErrorResponse.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Revocation.NormalizeErrorResponse.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ApplyRevocationResponseContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Session.ExtractLogoutRequest">
            <summary>
            Contains the logic responsible of extracting logout requests and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Session.ExtractLogoutRequest.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Session.ExtractLogoutRequest.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Session.ValidateLogoutRequest">
            <summary>
            Contains the logic responsible of validating logout requests and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Session.ValidateLogoutRequest.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Session.ValidateLogoutRequest.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Session.HandleLogoutRequest">
            <summary>
            Contains the logic responsible of handling logout requests and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Session.HandleLogoutRequest.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Session.HandleLogoutRequest.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Session.ApplyLogoutResponse`1">
            <summary>
            Contains the logic responsible of processing sign-in responses and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Session.ApplyLogoutResponse`1.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Session.ApplyLogoutResponse`1.HandleAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Session.ValidatePostLogoutRedirectUriParameter">
            <summary>
            Contains the logic responsible of rejecting logout requests that specify an invalid post_logout_redirect_uri parameter.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Session.ValidatePostLogoutRedirectUriParameter.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Session.ValidatePostLogoutRedirectUriParameter.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateLogoutRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Session.ValidateClientPostLogoutRedirectUri">
            <summary>
            Contains the logic responsible of rejecting logout requests that use an invalid redirect_uri.
            Note: this handler is not used when the degraded mode is enabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Session.ValidateClientPostLogoutRedirectUri.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Session.ValidateClientPostLogoutRedirectUri.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateLogoutRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Session.AttachPostLogoutRedirectUri">
            <summary>
            Contains the logic responsible of inferring the redirect URL
            used to send the response back to the client application.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Session.AttachPostLogoutRedirectUri.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Session.AttachPostLogoutRedirectUri.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ApplyLogoutResponseContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Session.AttachResponseState">
            <summary>
            Contains the logic responsible of attaching the state to the response.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Session.AttachResponseState.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Session.AttachResponseState.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ApplyLogoutResponseContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Userinfo.ExtractUserinfoRequest">
            <summary>
            Contains the logic responsible of extracting userinfo requests and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Userinfo.ExtractUserinfoRequest.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Userinfo.ExtractUserinfoRequest.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Userinfo.ValidateUserinfoRequest">
            <summary>
            Contains the logic responsible of validating userinfo requests and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Userinfo.ValidateUserinfoRequest.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Userinfo.ValidateUserinfoRequest.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Userinfo.HandleUserinfoRequest">
            <summary>
            Contains the logic responsible of handling userinfo requests and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Userinfo.HandleUserinfoRequest.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Userinfo.HandleUserinfoRequest.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ProcessRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Userinfo.ApplyUserinfoResponse`1">
            <summary>
            Contains the logic responsible of processing userinfo responses and invoking the corresponding event handlers.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Userinfo.ApplyUserinfoResponse`1.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Userinfo.ApplyUserinfoResponse`1.HandleAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Userinfo.ValidateAccessTokenParameter">
            <summary>
            Contains the logic responsible of rejecting userinfo requests that don't specify an access token.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Userinfo.ValidateAccessTokenParameter.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Userinfo.ValidateAccessTokenParameter.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateUserinfoRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Userinfo.ValidateToken">
            <summary>
            Contains the logic responsible of rejecting userinfo requests that don't specify a valid token.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Userinfo.ValidateToken.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Userinfo.ValidateToken.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.ValidateUserinfoRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Userinfo.AttachPrincipal">
            <summary>
            Contains the logic responsible of attaching the principal
            extracted from the access token to the event context.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Userinfo.AttachPrincipal.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Userinfo.AttachPrincipal.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.HandleUserinfoRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Userinfo.AttachAudiences">
            <summary>
            Contains the logic responsible of attaching the audiences to the userinfo response.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Userinfo.AttachAudiences.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Userinfo.AttachAudiences.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.HandleUserinfoRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlers.Userinfo.AttachClaims">
            <summary>
            Contains the logic responsible of attaching well known claims to the userinfo response.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerHandlers.Userinfo.AttachClaims.Descriptor">
            <summary>
            Gets the default descriptor definition assigned to this handler.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHandlers.Userinfo.AttachClaims.HandleAsync(OpenIddict.Server.OpenIddictServerEvents.HandleUserinfoRequestContext)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHandlerType">
            <summary>
            Represents the type of an OpenIddict server handler.
            </summary>
        </member>
        <member name="F:OpenIddict.Server.OpenIddictServerHandlerType.Unknown">
            <summary>
            The handler is of an unspecified type.
            </summary>
        </member>
        <member name="F:OpenIddict.Server.OpenIddictServerHandlerType.BuiltIn">
            <summary>
            The handler is a built-in handler, provided as part of the official OpenIddict packages.
            </summary>
        </member>
        <member name="F:OpenIddict.Server.OpenIddictServerHandlerType.Custom">
            <summary>
            The handler is a custom handler, registered by the end user or a third-party package.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerHelpers">
            <summary>
            Exposes extensions simplifying the integration with the OpenIddict server services.
            </summary>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHelpers.GetProperty``1(OpenIddict.Server.OpenIddictServerTransaction,System.String)">
            <summary>
            Retrieves a property value from the server transaction using the specified name.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="transaction">The server transaction.</param>
            <param name="name">The property name.</param>
            <returns>The property value or <c>null</c> if it couldn't be found.</returns>
        </member>
        <member name="M:OpenIddict.Server.OpenIddictServerHelpers.SetProperty``1(OpenIddict.Server.OpenIddictServerTransaction,System.String,``0)">
            <summary>
            Sets a property in the server transaction using the specified name and value.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="transaction">The server transaction.</param>
            <param name="name">The property name.</param>
            <param name="value">The property value.</param>
            <returns>The server transaction, so that calls can be easily chained.</returns>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerOptions">
            <summary>
            Provides various settings needed to configure the OpenIddict server handler.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.Issuer">
            <summary>
            Gets or sets the optional base address used to uniquely identify the authorization server.
            The URI must be absolute and may contain a path, but no query string or fragment part.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.EncryptionCredentials">
            <summary>
            Gets the list of encryption credentials used by the OpenIddict server services.
            Multiple credentials can be added to support key rollover, but if X.509 keys
            are used, at least one of them must have a valid creation/expiration date.
            Note: the encryption credentials are not used to protect/unprotect tokens issued
            by ASP.NET Core Data Protection, that uses its own key ring, configured separately.
            </summary>
            <remarks>
            Note: OpenIddict automatically sorts the credentials based on the following algorithm:
            <list type="bullet">
              <item><description>Symmetric keys are always preferred when they can be used for the operation (e.g token encryption).</description></item>
              <item><description>X.509 keys are always preferred to non-X.509 asymmetric keys.</description></item>
              <item><description>X.509 keys with the furthest expiration date are preferred.</description></item>
              <item><description>X.509 keys whose backing certificate is not yet valid are never preferred.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.SigningCredentials">
            <summary>
            Gets the list of signing credentials used by the OpenIddict server services.
            Multiple credentials can be added to support key rollover, but if X.509 keys
            are used, at least one of them must have a valid creation/expiration date.
            Note: the signing credentials are not used to protect/unprotect tokens issued
            by ASP.NET Core Data Protection, that uses its own key ring, configured separately.
            </summary>
            <remarks>
            Note: OpenIddict automatically sorts the credentials based on the following algorithm:
            <list type="bullet">
              <item><description>Symmetric keys are always preferred when they can be used for the operation (e.g token signing).</description></item>
              <item><description>X.509 keys are always preferred to non-X.509 asymmetric keys.</description></item>
              <item><description>X.509 keys with the furthest expiration date are preferred.</description></item>
              <item><description>X.509 keys whose backing certificate is not yet valid are never preferred.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.AuthorizationEndpointUris">
            <summary>
            Gets the absolute and relative URIs associated to the authorization endpoint.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.ConfigurationEndpointUris">
            <summary>
            Gets the absolute and relative URIs associated to the configuration endpoint.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.CryptographyEndpointUris">
            <summary>
            Gets the absolute and relative URIs associated to the cryptography endpoint.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.DeviceEndpointUris">
            <summary>
            Gets the absolute and relative URIs associated to the device endpoint.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.IntrospectionEndpointUris">
            <summary>
            Gets the absolute and relative URIs associated to the introspection endpoint.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.LogoutEndpointUris">
            <summary>
            Gets the absolute and relative URIs associated to the logout endpoint.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.RevocationEndpointUris">
            <summary>
            Gets the absolute and relative URIs associated to the revocation endpoint.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.TokenEndpointUris">
            <summary>
            Gets the absolute and relative URIs associated to the token endpoint.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.UserinfoEndpointUris">
            <summary>
            Gets the absolute and relative URIs associated to the userinfo endpoint.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.VerificationEndpointUris">
            <summary>
            Gets the absolute and relative URIs associated to the verification endpoint.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.JsonWebTokenHandler">
            <summary>
            Gets or sets the JWT handler used to protect and unprotect tokens.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.TokenValidationParameters">
            <summary>
            Gets the token validation parameters used by the OpenIddict server services.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.AuthorizationCodeLifetime">
            <summary>
            Gets or sets the period of time authorization codes remain valid after being issued. The default value is 5 minutes.
            While not recommended, this property can be set to <c>null</c> to issue codes that never expire.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.AccessTokenLifetime">
            <summary>
            Gets or sets the period of time access tokens remain valid after being issued. The default value is 1 hour.
            The client application is expected to refresh or acquire a new access token after the token has expired.
            While not recommended, this property can be set to <c>null</c> to issue access tokens that never expire.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.DeviceCodeLifetime">
            <summary>
            Gets or sets the period of time device codes remain valid after being issued. The default value is 10 minutes.
            The client application is expected to start a whole new authentication flow after the device code has expired.
            While not recommended, this property can be set to <c>null</c> to issue codes that never expire.
            Note: the same value should be chosen for both <see cref="P:OpenIddict.Server.OpenIddictServerOptions.UserCodeLifetime"/> and this property.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.IdentityTokenLifetime">
            <summary>
            Gets or sets the period of time identity tokens remain valid after being issued. The default value is 20 minutes.
            The client application is expected to refresh or acquire a new identity token after the token has expired.
            While not recommended, this property can be set to <c>null</c> to issue identity tokens that never expire.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.RefreshTokenLifetime">
            <summary>
            Gets or sets the period of time refresh tokens remain valid after being issued. The default value is 14 days.
            The client application is expected to start a whole new authentication flow after the refresh token has expired.
            While not recommended, this property can be set to <c>null</c> to issue refresh tokens that never expire.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.RefreshTokenReuseLeeway">
            <summary>
            Gets or sets the period of time rolling refresh tokens marked as redeemed can still be
            used to make concurrent refresh token requests. The default value is 15 seconds.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.UserCodeLifetime">
            <summary>
            Gets or sets the period of time user codes remain valid after being issued. The default value is 10 minutes.
            The client application is expected to start a whole new authentication flow after the user code has expired.
            While not recommended, this property can be set to <c>null</c> to issue codes that never expire.
            Note: the same value should be chosen for both <see cref="P:OpenIddict.Server.OpenIddictServerOptions.DeviceCodeLifetime"/> and this property.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.EnableDegradedMode">
            <summary>
            Gets or sets a boolean indicating whether the degraded mode is enabled. When this degraded mode
            is enabled, all the security checks that depend on the OpenIddict core managers are disabled.
            This option MUST be enabled with extreme caution and custom handlers MUST be registered to
            properly validate OpenID Connect requests.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.Handlers">
            <summary>
            Gets the list of the handlers responsible of processing the OpenIddict server operations.
            Note: the list is automatically sorted based on the order assigned to each handler descriptor.
            As such, it MUST NOT be mutated after options initialization to preserve the exact order.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.AcceptAnonymousClients">
            <summary>
            Gets or sets a boolean determining whether client identification is optional.
            Enabling this option allows client applications to communicate with the token,
            introspection and revocation endpoints without having to send their client identifier.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.Claims">
            <summary>
            Gets the OAuth 2.0/OpenID Connect claims supported by this application.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.DisableAccessTokenEncryption">
            <summary>
            Gets or sets a boolean indicating whether access token encryption should be disabled.
            Disabling encryption is NOT recommended and SHOULD only be done when issuing tokens
            to third-party resource servers/APIs you don't control and don't fully trust.
            Note: disabling encryption has no effect when using ASP.NET Core Data Protection.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.DisableAuthorizationStorage">
            <summary>
            Gets or sets a boolean indicating whether authorization storage should be disabled.
            When disabled, ad-hoc authorizations are not created when an authorization code or
            refresh token is issued and can't be revoked to prevent associated tokens from being used.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.DisableRollingRefreshTokens">
            <summary>
            Gets or sets a boolean indicating whether rolling tokens are disabled.
            When disabled, refresh tokens used in a token request are not marked
            as redeemed and can still be used until they expire. Disabling
            rolling refresh tokens is NOT recommended, for security reasons.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.DisableSlidingRefreshTokenExpiration">
            <summary>
            Gets or sets a boolean indicating whether sliding expiration is disabled
            for refresh tokens. When this option is set to <see langword="true"/>,
            refresh tokens are issued with a fixed expiration date: when they expire,
            a complete authorization flow must be started to retrieve a new refresh token.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.DisableTokenStorage">
            <summary>
            Gets or sets a boolean indicating whether token storage should be disabled.
            When disabled, no database entry is created for the tokens and codes
            returned by OpenIddict. Using this option is generally NOT recommended
            as it prevents the tokens and codes from being revoked (if needed).
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.DisableScopeValidation">
            <summary>
            Gets or sets a boolean indicating whether scope validation is disabled.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.CodeChallengeMethods">
            <summary>
            Gets the OAuth 2.0 code challenge methods enabled for this application.
            By default, only the S256 method is allowed (if the code flow is enabled).
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.GrantTypes">
            <summary>
            Gets the OAuth 2.0/OpenID Connect flows enabled for this application.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.RequireProofKeyForCodeExchange">
            <summary>
            Gets or sets a boolean indicating whether PKCE must be used by client applications
            when requesting an authorization code (e.g when using the code or hybrid flows).
            If this property is set to <see langword="true"/>, authorization requests that
            lack the code_challenge will be automatically rejected by OpenIddict.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.ResponseTypes">
            <summary>
            Gets the OAuth 2.0/OpenID Connect response types enabled for this application.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.ResponseModes">
            <summary>
            Gets the OAuth 2.0/OpenID Connect response modes enabled for this application.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.IgnoreEndpointPermissions">
            <summary>
            Gets or sets a boolean indicating whether endpoint permissions should be ignored.
            Setting this property to <see langword="true"/> is NOT recommended.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.IgnoreGrantTypePermissions">
            <summary>
            Gets or sets a boolean indicating whether grant type permissions should be ignored.
            Setting this property to <see langword="true"/> is NOT recommended.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.IgnoreResponseTypePermissions">
            <summary>
            Gets or sets a boolean indicating whether response type permissions should be ignored.
            Setting this property to <see langword="true"/> is NOT recommended.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.IgnoreScopePermissions">
            <summary>
            Gets or sets a boolean indicating whether scope permissions should be ignored.
            Setting this property to <see langword="true"/> is NOT recommended.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.Scopes">
            <summary>
            Gets the OAuth 2.0/OpenID Connect scopes enabled for this application.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.UseReferenceAccessTokens">
            <summary>
            Gets or sets a boolean indicating whether reference access tokens should be used.
            When set to <see langword="true"/>, the token payload is stored in the database
            and a crypto-secure random identifier is returned to the client application.
            Enabling this option is useful when storing a very large number of claims
            in the tokens, but it is RECOMMENDED to enable column encryption
            in the database or use the ASP.NET Core Data Protection integration,
            that provides additional protection against token leakage.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerOptions.UseReferenceRefreshTokens">
            <summary>
            Gets or sets a boolean indicating whether reference refresh tokens should be used.
            When set to <see langword="true"/>, the token payload is stored in the database
            and a crypto-secure random identifier is returned to the client application.
            Enabling this option is useful when storing a very large number of claims
            in the tokens, but it is RECOMMENDED to enable column encryption
            in the database or use the ASP.NET Core Data Protection integration,
            that provides additional protection against token leakage.
            </summary>
        </member>
        <member name="T:OpenIddict.Server.OpenIddictServerTransaction">
            <summary>
            Represents the context associated with an OpenID Connect server request.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerTransaction.EndpointType">
            <summary>
            Gets or sets the type of the endpoint processing the current request.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerTransaction.Issuer">
            <summary>
            Gets or sets the issuer address associated with the current transaction, if available.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerTransaction.Localizer">
            <summary>
            Gets or sets the localizer associated with the current request.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerTransaction.Logger">
            <summary>
            Gets or sets the logger associated with the current request.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerTransaction.Options">
            <summary>
            Gets or sets the options associated with the current request.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerTransaction.Properties">
            <summary>
            Gets the additional properties associated with the current request.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerTransaction.Request">
            <summary>
            Gets or sets the current OpenID Connect request.
            </summary>
        </member>
        <member name="P:OpenIddict.Server.OpenIddictServerTransaction.Response">
            <summary>
            Gets or sets the current OpenID Connect response being returned.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder">
            <summary>
            Exposes the necessary methods required to configure the OpenIddict server services.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.
            </summary>
            <param name="services">The services collection.</param>
        </member>
        <member name="P:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.Services">
            <summary>
            Gets the services collection.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AddEventHandler``1(System.Action{OpenIddict.Server.OpenIddictServerHandlerDescriptor.Builder{``0}})">
            <summary>
            Registers an event handler using the specified configuration delegate.
            </summary>
            <typeparam name="TContext">The event context type.</typeparam>
            <param name="configuration">The configuration delegate.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AddEventHandler(OpenIddict.Server.OpenIddictServerHandlerDescriptor)">
            <summary>
            Registers an event handler using the specified descriptor.
            </summary>
            <param name="descriptor">The handler descriptor.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.RemoveEventHandler(OpenIddict.Server.OpenIddictServerHandlerDescriptor)">
            <summary>
            Removes the event handler that matches the specified descriptor.
            </summary>
            <param name="descriptor">The descriptor corresponding to the handler to remove.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.Configure(System.Action{OpenIddict.Server.OpenIddictServerOptions})">
            <summary>
            Amends the default OpenIddict server configuration.
            </summary>
            <param name="configuration">The delegate used to configure the OpenIddict options.</param>
            <remarks>This extension can be safely called multiple times.</remarks>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AcceptAnonymousClients">
            <summary>
            Makes client identification optional so that token, introspection and revocation
            requests that don't specify a client_id are not automatically rejected.
            Enabling this option is NOT recommended.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AddEncryptionCredentials(Microsoft.IdentityModel.Tokens.EncryptingCredentials)">
            <summary>
            Registers encryption credentials.
            </summary>
            <param name="credentials">The encrypting credentials.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AddEncryptionKey(Microsoft.IdentityModel.Tokens.SecurityKey)">
            <summary>
            Registers an encryption key.
            </summary>
            <param name="key">The security key.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AddDevelopmentEncryptionCertificate">
            <summary>
            Registers (and generates if necessary) a user-specific development encryption certificate.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AddDevelopmentEncryptionCertificate(System.Security.Cryptography.X509Certificates.X500DistinguishedName)">
            <summary>
            Registers (and generates if necessary) a user-specific development encryption certificate.
            </summary>
            <param name="subject">The subject name associated with the certificate.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AddEphemeralEncryptionKey">
            <summary>
            Registers a new ephemeral encryption key. Ephemeral encryption keys are automatically
            discarded when the application shuts down and payloads encrypted using this key are
            automatically invalidated. This method should only be used during development.
            On production, using a X.509 certificate stored in the machine store is recommended.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AddEphemeralEncryptionKey(System.String)">
            <summary>
            Registers a new ephemeral encryption key. Ephemeral encryption keys are automatically
            discarded when the application shuts down and payloads encrypted using this key are
            automatically invalidated. This method should only be used during development.
            On production, using a X.509 certificate stored in the machine store is recommended.
            </summary>
            <param name="algorithm">The algorithm associated with the encryption key.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AddEncryptionCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Registers an encryption certificate.
            </summary>
            <param name="certificate">The encryption certificate.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AddEncryptionCertificate(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Registers an encryption certificate retrieved from an embedded resource.
            </summary>
            <param name="assembly">The assembly containing the certificate.</param>
            <param name="resource">The name of the embedded resource.</param>
            <param name="password">The password used to open the certificate.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AddEncryptionCertificate(System.Reflection.Assembly,System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
            <summary>
            Registers an encryption certificate retrieved from an embedded resource.
            </summary>
            <param name="assembly">The assembly containing the certificate.</param>
            <param name="resource">The name of the embedded resource.</param>
            <param name="password">The password used to open the certificate.</param>
            <param name="flags">An enumeration of flags indicating how and where to store the private key of the certificate.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AddEncryptionCertificate(System.IO.Stream,System.String)">
            <summary>
            Registers an encryption certificate extracted from a stream.
            </summary>
            <param name="stream">The stream containing the certificate.</param>
            <param name="password">The password used to open the certificate.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AddEncryptionCertificate(System.IO.Stream,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
            <summary>
            Registers an encryption certificate extracted from a stream.
            </summary>
            <param name="stream">The stream containing the certificate.</param>
            <param name="password">The password used to open the certificate.</param>
            <param name="flags">
            An enumeration of flags indicating how and where
            to store the private key of the certificate.
            </param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AddEncryptionCertificate(System.String)">
            <summary>
            Registers an encryption certificate retrieved from the X.509 user or machine store.
            </summary>
            <param name="thumbprint">The thumbprint of the certificate used to identify it in the X.509 store.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AddEncryptionCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Registers an encryption certificate retrieved from the specified X.509 store.
            </summary>
            <param name="thumbprint">The thumbprint of the certificate used to identify it in the X.509 store.</param>
            <param name="name">The name of the X.509 store.</param>
            <param name="location">The location of the X.509 store.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AddSigningCredentials(Microsoft.IdentityModel.Tokens.SigningCredentials)">
            <summary>
            Registers signing credentials.
            </summary>
            <param name="credentials">The signing credentials.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AddSigningKey(Microsoft.IdentityModel.Tokens.SecurityKey)">
            <summary>
            Registers a signing key.
            </summary>
            <param name="key">The security key.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AddDevelopmentSigningCertificate">
            <summary>
            Registers (and generates if necessary) a user-specific development signing certificate.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AddDevelopmentSigningCertificate(System.Security.Cryptography.X509Certificates.X500DistinguishedName)">
            <summary>
            Registers (and generates if necessary) a user-specific development signing certificate.
            </summary>
            <param name="subject">The subject name associated with the certificate.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AddEphemeralSigningKey">
            <summary>
            Registers a new ephemeral signing key. Ephemeral signing keys are automatically
            discarded when the application shuts down and payloads signed using this key are
            automatically invalidated. This method should only be used during development.
            On production, using a X.509 certificate stored in the machine store is recommended.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AddEphemeralSigningKey(System.String)">
            <summary>
            Registers a new ephemeral signing key. Ephemeral signing keys are automatically
            discarded when the application shuts down and payloads signed using this key are
            automatically invalidated. This method should only be used during development.
            On production, using a X.509 certificate stored in the machine store is recommended.
            </summary>
            <param name="algorithm">The algorithm associated with the signing key.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AddSigningCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Registers a signing certificate.
            </summary>
            <param name="certificate">The signing certificate.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AddSigningCertificate(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Registers a signing certificate retrieved from an embedded resource.
            </summary>
            <param name="assembly">The assembly containing the certificate.</param>
            <param name="resource">The name of the embedded resource.</param>
            <param name="password">The password used to open the certificate.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AddSigningCertificate(System.Reflection.Assembly,System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
            <summary>
            Registers a signing certificate retrieved from an embedded resource.
            </summary>
            <param name="assembly">The assembly containing the certificate.</param>
            <param name="resource">The name of the embedded resource.</param>
            <param name="password">The password used to open the certificate.</param>
            <param name="flags">An enumeration of flags indicating how and where to store the private key of the certificate.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AddSigningCertificate(System.IO.Stream,System.String)">
            <summary>
            Registers a signing certificate extracted from a stream.
            </summary>
            <param name="stream">The stream containing the certificate.</param>
            <param name="password">The password used to open the certificate.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AddSigningCertificate(System.IO.Stream,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
            <summary>
            Registers a signing certificate extracted from a stream.
            </summary>
            <param name="stream">The stream containing the certificate.</param>
            <param name="password">The password used to open the certificate.</param>
            <param name="flags">
            An enumeration of flags indicating how and where
            to store the private key of the certificate.
            </param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AddSigningCertificate(System.String)">
            <summary>
            Registers a signing certificate retrieved from the X.509 user or machine store.
            </summary>
            <param name="thumbprint">The thumbprint of the certificate used to identify it in the X.509 store.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AddSigningCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Registers a signing certificate retrieved from the specified X.509 store.
            </summary>
            <param name="thumbprint">The thumbprint of the certificate used to identify it in the X.509 store.</param>
            <param name="name">The name of the X.509 store.</param>
            <param name="location">The location of the X.509 store.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AllowAuthorizationCodeFlow">
            <summary>
            Enables authorization code flow support. For more information
            about this specific OAuth 2.0/OpenID Connect flow, visit
            https://tools.ietf.org/html/rfc6749#section-4.1 and
            http://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AllowClientCredentialsFlow">
            <summary>
            Enables client credentials flow support. For more information about this
            specific OAuth 2.0 flow, visit https://tools.ietf.org/html/rfc6749#section-4.4.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AllowCustomFlow(System.String)">
            <summary>
            Enables custom grant type support.
            </summary>
            <param name="type">The grant type associated with the flow.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AllowDeviceCodeFlow">
            <summary>
            Enables device code flow support. For more information about this
            specific OAuth 2.0 flow, visit https://tools.ietf.org/html/rfc8628.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AllowHybridFlow">
            <summary>
            Enables hybrid flow support. For more information
            about this specific OpenID Connect flow, visit
            http://openid.net/specs/openid-connect-core-1_0.html#HybridFlowAuth.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AllowImplicitFlow">
            <summary>
            Enables implicit flow support. For more information
            about this specific OAuth 2.0/OpenID Connect flow, visit
            https://tools.ietf.org/html/rfc6749#section-4.2 and
            http://openid.net/specs/openid-connect-core-1_0.html#ImplicitFlowAuth.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AllowNoneFlow">
            <summary>
            Enables none flow support. For more information about this specific OAuth 2.0 flow,
            visit https://openid.net/specs/oauth-v2-multiple-response-types-1_0.html#none.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AllowPasswordFlow">
            <summary>
            Enables password flow support. For more information about this specific
            OAuth 2.0 flow, visit https://tools.ietf.org/html/rfc6749#section-4.3.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.AllowRefreshTokenFlow">
            <summary>
            Enables refresh token flow support. For more information about this
            specific OAuth 2.0 flow, visit https://tools.ietf.org/html/rfc6749#section-6.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.SetAuthorizationEndpointUris(System.String[])">
            <summary>
            Sets the relative or absolute URLs associated to the authorization endpoint.
            If an empty array is specified, the endpoint will be considered disabled.
            Note: only the first address will be returned as part of the discovery document.
            </summary>
            <param name="addresses">The addresses associated to the endpoint.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.SetAuthorizationEndpointUris(System.Uri[])">
            <summary>
            Sets the relative or absolute URLs associated to the authorization endpoint.
            If an empty array is specified, the endpoint will be considered disabled.
            Note: only the first address will be returned as part of the discovery document.
            </summary>
            <param name="addresses">The addresses associated to the endpoint.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.SetConfigurationEndpointUris(System.String[])">
            <summary>
            Sets the relative or absolute URLs associated to the configuration endpoint.
            If an empty array is specified, the endpoint will be considered disabled.
            Note: only the first address will be returned as part of the discovery document.
            </summary>
            <param name="addresses">The addresses associated to the endpoint.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.SetConfigurationEndpointUris(System.Uri[])">
            <summary>
            Sets the relative or absolute URLs associated to the configuration endpoint.
            If an empty array is specified, the endpoint will be considered disabled.
            Note: only the first address will be returned as part of the discovery document.
            </summary>
            <param name="addresses">The addresses associated to the endpoint.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.SetCryptographyEndpointUris(System.String[])">
            <summary>
            Sets the relative or absolute URLs associated to the cryptography endpoint.
            If an empty array is specified, the endpoint will be considered disabled.
            Note: only the first address will be returned as part of the discovery document.
            </summary>
            <param name="addresses">The addresses associated to the endpoint.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.SetCryptographyEndpointUris(System.Uri[])">
            <summary>
            Sets the relative or absolute URLs associated to the cryptography endpoint.
            If an empty array is specified, the endpoint will be considered disabled.
            Note: only the first address will be returned as part of the discovery document.
            </summary>
            <param name="addresses">The addresses associated to the endpoint.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.SetDeviceEndpointUris(System.String[])">
            <summary>
            Sets the relative or absolute URLs associated to the device endpoint.
            If an empty array is specified, the endpoint will be considered disabled.
            Note: only the first address will be returned as part of the discovery document.
            </summary>
            <param name="addresses">The addresses associated to the endpoint.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.SetDeviceEndpointUris(System.Uri[])">
            <summary>
            Sets the relative or absolute URLs associated to the device endpoint.
            If an empty array is specified, the endpoint will be considered disabled.
            Note: only the first address will be returned as part of the discovery document.
            </summary>
            <param name="addresses">The addresses associated to the endpoint.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.SetIntrospectionEndpointUris(System.String[])">
            <summary>
            Sets the relative or absolute URLs associated to the introspection endpoint.
            If an empty array is specified, the endpoint will be considered disabled.
            Note: only the first address will be returned as part of the discovery document.
            </summary>
            <param name="addresses">The addresses associated to the endpoint.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.SetIntrospectionEndpointUris(System.Uri[])">
            <summary>
            Sets the relative or absolute URLs associated to the introspection endpoint.
            If an empty array is specified, the endpoint will be considered disabled.
            Note: only the first address will be returned as part of the discovery document.
            </summary>
            <param name="addresses">The addresses associated to the endpoint.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.SetLogoutEndpointUris(System.String[])">
            <summary>
            Sets the relative or absolute URLs associated to the logout endpoint.
            If an empty array is specified, the endpoint will be considered disabled.
            Note: only the first address will be returned as part of the discovery document.
            </summary>
            <param name="addresses">The addresses associated to the endpoint.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.SetLogoutEndpointUris(System.Uri[])">
            <summary>
            Sets the relative or absolute URLs associated to the logout endpoint.
            If an empty array is specified, the endpoint will be considered disabled.
            Note: only the first address will be returned as part of the discovery document.
            </summary>
            <param name="addresses">The addresses associated to the endpoint.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.SetRevocationEndpointUris(System.String[])">
            <summary>
            Sets the relative or absolute URLs associated to the revocation endpoint.
            If an empty array is specified, the endpoint will be considered disabled.
            Note: only the first address will be returned as part of the discovery document.
            </summary>
            <param name="addresses">The addresses associated to the endpoint.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.SetRevocationEndpointUris(System.Uri[])">
            <summary>
            Sets the relative or absolute URLs associated to the revocation endpoint.
            If an empty array is specified, the endpoint will be considered disabled.
            Note: only the first address will be returned as part of the discovery document.
            </summary>
            <param name="addresses">The addresses associated to the endpoint.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.SetTokenEndpointUris(System.String[])">
            <summary>
            Sets the relative or absolute URLs associated to the token endpoint.
            If an empty array is specified, the endpoint will be considered disabled.
            Note: only the first address will be returned as part of the discovery document.
            </summary>
            <param name="addresses">The addresses associated to the endpoint.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.SetTokenEndpointUris(System.Uri[])">
            <summary>
            Sets the relative or absolute URLs associated to the token endpoint.
            If an empty array is specified, the endpoint will be considered disabled.
            Note: only the first address will be returned as part of the discovery document.
            </summary>
            <param name="addresses">The addresses associated to the endpoint.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.SetUserinfoEndpointUris(System.String[])">
            <summary>
            Sets the relative or absolute URLs associated to the userinfo endpoint.
            If an empty array is specified, the endpoint will be considered disabled.
            Note: only the first address will be returned as part of the discovery document.
            </summary>
            <param name="addresses">The addresses associated to the endpoint.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.SetUserinfoEndpointUris(System.Uri[])">
            <summary>
            Sets the relative or absolute URLs associated to the userinfo endpoint.
            If an empty array is specified, the endpoint will be considered disabled.
            Note: only the first address will be returned as part of the discovery document.
            </summary>
            <param name="addresses">The addresses associated to the endpoint.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.SetVerificationEndpointUris(System.String[])">
            <summary>
            Sets the relative or absolute URLs associated to the verification endpoint.
            If an empty array is specified, the endpoint will be considered disabled.
            Note: only the first address will be returned by the device endpoint.
            </summary>
            <param name="addresses">The addresses associated to the endpoint.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.SetVerificationEndpointUris(System.Uri[])">
            <summary>
            Sets the relative or absolute URLs associated to the verification endpoint.
            If an empty array is specified, the endpoint will be considered disabled.
            Note: only the first address will be returned by the device endpoint.
            </summary>
            <param name="addresses">The addresses associated to the endpoint.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.DisableAccessTokenEncryption">
            <summary>
            Disables JWT access token encryption (this option doesn't affect Data Protection tokens).
            Disabling encryption is NOT recommended and SHOULD only be done when issuing tokens
            to third-party resource servers/APIs you don't control and don't fully trust.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.DisableAuthorizationStorage">
            <summary>
            Disables authorization storage so that ad-hoc authorizations are
            not created when an authorization code or refresh token is issued
            and can't be revoked to prevent associated tokens from being used.
            Using this option is generally NOT recommended.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.DisableRollingRefreshTokens">
            <summary>
            Configures OpenIddict to disable rolling refresh tokens so
            that refresh tokens used in a token request are not marked
            as redeemed and can still be used until they expire. Disabling
            rolling refresh tokens is NOT recommended, for security reasons.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.DisableScopeValidation">
            <summary>
            Allows processing authorization and token requests that specify scopes that have not
            been registered using <see cref="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.RegisterScopes(System.String[])"/> or the scope manager.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.DisableSlidingRefreshTokenExpiration">
            <summary>
            Disables sliding expiration. When using this option, refresh tokens
            are issued with a fixed expiration date: when they expire, a complete
            authorization flow must be started to retrieve a new refresh token.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.DisableTokenStorage">
            <summary>
            Disables token storage, so that no database entry is created
            for the tokens and codes returned by the OpenIddict server.
            Using this option is generally NOT recommended as it prevents
            the tokens and codes from being revoked (if needed).
            Note: disabling token storage requires disabling sliding
            expiration or enabling rolling tokens.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.EnableDegradedMode">
            <summary>
            Enables the degraded mode. When the degraded mode is enabled, all the security checks that
            depend on the OpenIddict core managers are disabled. This option MUST be enabled with extreme
            caution and custom handlers MUST be registered to properly validate OpenID Connect requests.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.IgnoreEndpointPermissions">
            <summary>
            Disables endpoint permissions enforcement. Calling this method is NOT recommended.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.IgnoreGrantTypePermissions">
            <summary>
            Disables grant type permissions enforcement. Calling this method is NOT recommended.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.IgnoreResponseTypePermissions">
            <summary>
            Disables response type permissions enforcement. Calling this method is NOT recommended.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.IgnoreScopePermissions">
            <summary>
            Disables scope permissions enforcement. Calling this method is NOT recommended.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.RegisterClaims(System.String[])">
            <summary>
            Registers the specified claims as supported claims so
            they can be returned as part of the discovery document.
            </summary>
            <param name="claims">The supported claims.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.RegisterScopes(System.String[])">
            <summary>
            Registers the specified scopes as supported scopes so
            they can be returned as part of the discovery document.
            </summary>
            <param name="scopes">The supported scopes.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.RequireProofKeyForCodeExchange">
            <summary>
            Configures OpenIddict to force client applications to use Proof Key for Code Exchange
            (PKCE) when requesting an authorization code (e.g when using the code or hybrid flows).
            When enforced, authorization requests that lack the code_challenge will be rejected.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.SetAccessTokenLifetime(System.Nullable{System.TimeSpan})">
            <summary>
            Sets the access token lifetime, after which client applications must retrieve
            a new access token by making a grant_type=refresh_token token request
            or a prompt=none authorization request, depending on the selected flow.
            Using long-lived access tokens or tokens that never expire is not recommended.
            While discouraged, <c>null</c> can be specified to issue tokens that never expire.
            </summary>
            <param name="lifetime">The access token lifetime.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.SetAuthorizationCodeLifetime(System.Nullable{System.TimeSpan})">
            <summary>
            Sets the authorization code lifetime, after which client applications
            are unable to send a grant_type=authorization_code token request.
            Using short-lived authorization codes is strongly recommended.
            While discouraged, <c>null</c> can be specified to issue codes that never expire.
            </summary>
            <param name="lifetime">The authorization code lifetime.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.SetDeviceCodeLifetime(System.Nullable{System.TimeSpan})">
            <summary>
            Sets the device code lifetime, after which client applications are unable to
            send a grant_type=urn:ietf:params:oauth:grant-type:device_code token request.
            Using short-lived device codes is strongly recommended.
            While discouraged, <c>null</c> can be specified to issue codes that never expire.
            </summary>
            <param name="lifetime">The authorization code lifetime.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.SetIdentityTokenLifetime(System.Nullable{System.TimeSpan})">
            <summary>
            Sets the identity token lifetime, after which client
            applications should refuse processing identity tokens.
            While discouraged, <c>null</c> can be specified to issue tokens that never expire.
            </summary>
            <param name="lifetime">The identity token lifetime.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.SetRefreshTokenLifetime(System.Nullable{System.TimeSpan})">
            <summary>
            Sets the refresh token lifetime, after which client applications must get
            a new authorization from the user. When sliding expiration is enabled,
            a new refresh token is always issued to the client application,
            which prolongs the validity period of the refresh token.
            While discouraged, <c>null</c> can be specified to issue tokens that never expire.
            </summary>
            <param name="lifetime">The refresh token lifetime.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.SetRefreshTokenReuseLeeway(System.Nullable{System.TimeSpan})">
            <summary>
            Sets the refresh token reuse leeway, during which rolling refresh tokens marked
            as redeemed can still be used to make concurrent refresh token requests.
            </summary>
            <param name="leeway">The refresh token reuse interval.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.SetUserCodeLifetime(System.Nullable{System.TimeSpan})">
            <summary>
            Sets the user code lifetime, after which they'll no longer be considered valid.
            Using short-lived device codes is strongly recommended.
            While discouraged, <c>null</c> can be specified to issue codes that never expire.
            </summary>
            <param name="lifetime">The authorization code lifetime.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.SetIssuer(System.Uri)">
            <summary>
            Sets the issuer address, which is used as the base address
            for the endpoint URIs returned from the discovery endpoint.
            </summary>
            <param name="address">The issuer address.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.UseReferenceAccessTokens">
            <summary>
            Configures OpenIddict to use reference tokens, so that the access token payloads
            are stored in the database (only an identifier is returned to the client application).
            Enabling this option is useful when storing a very large number of claims in the tokens,
            but it is RECOMMENDED to enable column encryption in the database or use the ASP.NET Core
            Data Protection integration, that provides additional protection against token leakage.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.UseReferenceRefreshTokens">
            <summary>
            Configures OpenIddict to use reference tokens, so that the refresh token payloads
            are stored in the database (only an identifier is returned to the client application).
            Enabling this option is useful when storing a very large number of claims in the tokens,
            but it is RECOMMENDED to enable column encryption in the database or use the ASP.NET Core
            Data Protection integration, that provides additional protection against token leakage.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerExtensions">
            <summary>
            Exposes extensions allowing to register the OpenIddict server services.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerExtensions.AddServer(Microsoft.Extensions.DependencyInjection.OpenIddictBuilder)">
            <summary>
            Registers the OpenIddict token server services in the DI container.
            </summary>
            <param name="builder">The services builder used by OpenIddict to register new services.</param>
            <remarks>This extension can be safely called multiple times.</remarks>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictServerExtensions.AddServer(Microsoft.Extensions.DependencyInjection.OpenIddictBuilder,System.Action{Microsoft.Extensions.DependencyInjection.OpenIddictServerBuilder})">
            <summary>
            Registers the OpenIddict token server services in the DI container.
            </summary>
            <param name="builder">The services builder used by OpenIddict to register new services.</param>
            <param name="configuration">The configuration delegate used to configure the server services.</param>
            <remarks>This extension can be safely called multiple times.</remarks>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder"/>.</returns>
        </member>
    </members>
</doc>

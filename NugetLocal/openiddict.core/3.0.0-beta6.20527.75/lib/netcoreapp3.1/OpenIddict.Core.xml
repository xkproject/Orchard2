<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenIddict.Core</name>
    </assembly>
    <members>
        <member name="T:OpenIddict.Core.OpenIddictApplicationCache`1">
            <summary>
            Provides methods allowing to cache applications after retrieving them from the store.
            </summary>
            <typeparam name="TApplication">The type of the Application entity.</typeparam>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationCache`1.AddAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationCache`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationCache`1.FindByClientIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationCache`1.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationCache`1.FindByPostLogoutRedirectUriAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationCache`1.FindByRedirectUriAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationCache`1.RemoveAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationCache`1.CreateEntryAsync(System.Object,`0,System.Threading.CancellationToken)">
            <summary>
            Creates a cache entry for the specified key.
            </summary>
            <param name="key">The cache key.</param>
            <param name="application">The application to store in the cache entry, if applicable.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationCache`1.CreateEntryAsync(System.Object,System.Collections.Immutable.ImmutableArray{`0},System.Threading.CancellationToken)">
            <summary>
            Creates a cache entry for the specified key.
            </summary>
            <param name="key">The cache key.</param>
            <param name="applications">The applications to store in the cache entry.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationCache`1.CreateExpirationSignalAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Creates an expiration signal allowing to invalidate all the
            cache entries associated with the specified application.
            </summary>
            <param name="application">The application associated with the expiration signal.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns an expiration signal for the specified application.
            </returns>
        </member>
        <member name="T:OpenIddict.Core.OpenIddictAuthorizationCache`1">
            <summary>
            Provides methods allowing to cache authorizations after retrieving them from the store.
            </summary>
            <typeparam name="TAuthorization">The type of the Authorization entity.</typeparam>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationCache`1.AddAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationCache`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationCache`1.FindAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationCache`1.FindAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationCache`1.FindAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationCache`1.FindAsync(System.String,System.String,System.String,System.String,System.Collections.Immutable.ImmutableArray{System.String},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationCache`1.FindByApplicationIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationCache`1.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationCache`1.FindBySubjectAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationCache`1.RemoveAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationCache`1.CreateEntryAsync(System.Object,`0,System.Threading.CancellationToken)">
            <summary>
            Creates a cache entry for the specified key.
            </summary>
            <param name="key">The cache key.</param>
            <param name="authorization">The authorization to store in the cache entry, if applicable.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationCache`1.CreateEntryAsync(System.Object,System.Collections.Immutable.ImmutableArray{`0},System.Threading.CancellationToken)">
            <summary>
            Creates a cache entry for the specified key.
            </summary>
            <param name="key">The cache key.</param>
            <param name="authorizations">The authorizations to store in the cache entry.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationCache`1.CreateExpirationSignalAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Creates an expiration signal allowing to invalidate all the
            cache entries associated with the specified authorization.
            </summary>
            <param name="authorization">The authorization associated with the expiration signal.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns an expiration signal for the specified authorization.
            </returns>
        </member>
        <member name="T:OpenIddict.Core.OpenIddictScopeCache`1">
            <summary>
            Provides methods allowing to cache scopes after retrieving them from the store.
            </summary>
            <typeparam name="TScope">The type of the Scope entity.</typeparam>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeCache`1.AddAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeCache`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeCache`1.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeCache`1.FindByNameAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeCache`1.FindByNamesAsync(System.Collections.Immutable.ImmutableArray{System.String},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeCache`1.FindByResourceAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeCache`1.RemoveAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeCache`1.CreateEntryAsync(System.Object,`0,System.Threading.CancellationToken)">
            <summary>
            Creates a cache entry for the specified key.
            </summary>
            <param name="key">The cache key.</param>
            <param name="scope">The scope to store in the cache entry, if applicable.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeCache`1.CreateEntryAsync(System.Object,System.Collections.Immutable.ImmutableArray{`0},System.Threading.CancellationToken)">
            <summary>
            Creates a cache entry for the specified key.
            </summary>
            <param name="key">The cache key.</param>
            <param name="scopes">The scopes to store in the cache entry.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeCache`1.CreateExpirationSignalAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Creates an expiration signal allowing to invalidate all the
            cache entries associated with the specified scope.
            </summary>
            <param name="scope">The scope associated with the expiration signal.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns an expiration signal for the specified scope.
            </returns>
        </member>
        <member name="T:OpenIddict.Core.OpenIddictTokenCache`1">
            <summary>
            Provides methods allowing to cache tokens after retrieving them from the store.
            </summary>
            <typeparam name="TToken">The type of the Token entity.</typeparam>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenCache`1.AddAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenCache`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenCache`1.FindAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenCache`1.FindAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenCache`1.FindAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenCache`1.FindByApplicationIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenCache`1.FindByAuthorizationIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenCache`1.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenCache`1.FindByReferenceIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenCache`1.FindBySubjectAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenCache`1.RemoveAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenCache`1.CreateEntryAsync(System.Object,`0,System.Threading.CancellationToken)">
            <summary>
            Creates a cache entry for the specified key.
            </summary>
            <param name="key">The cache key.</param>
            <param name="token">The token to store in the cache entry, if applicable.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenCache`1.CreateEntryAsync(System.Object,System.Collections.Immutable.ImmutableArray{`0},System.Threading.CancellationToken)">
            <summary>
            Creates a cache entry for the specified key.
            </summary>
            <param name="key">The cache key.</param>
            <param name="tokens">The tokens to store in the cache entry.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenCache`1.CreateExpirationSignalAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Creates an expiration signal allowing to invalidate all the
            cache entries associated with the specified token.
            </summary>
            <param name="token">The token associated with the expiration signal.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns an expiration signal for the specified token.
            </returns>
        </member>
        <member name="T:OpenIddict.Core.OpenIddictApplicationManager`1">
            <summary>
            Provides methods allowing to manage the applications stored in the store.
            </summary>
            <remarks>
            Applications that do not want to depend on a specific entity type can use the non-generic
            <see cref="T:OpenIddict.Abstractions.IOpenIddictApplicationManager"/> instead, for which the actual entity type
            is resolved at runtime based on the default entity type registered in the core options.
            </remarks>
            <typeparam name="TApplication">The type of the Application entity.</typeparam>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictApplicationManager`1.Cache">
            <summary>
            Gets the cache associated with the current manager.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictApplicationManager`1.Localizer">
            <summary>
            Gets the string localizer associated with the current manager.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictApplicationManager`1.Logger">
            <summary>
            Gets the logger associated with the current manager.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictApplicationManager`1.Options">
            <summary>
            Gets the options associated with the current manager.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictApplicationManager`1.Store">
            <summary>
            Gets the store associated with the current manager.
            </summary>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Determines the number of applications that exist in the database.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of applications in the database.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.CountAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Determines the number of applications that match the specified query.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of applications that match the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.CreateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Creates a new application.
            </summary>
            <param name="application">The application to create.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.CreateAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a new application.
            Note: the default implementation automatically hashes the client
            secret before storing it in the database, for security reasons.
            </summary>
            <param name="application">The application to create.</param>
            <param name="secret">The client secret associated with the application, if applicable.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.CreateAsync(OpenIddict.Abstractions.OpenIddictApplicationDescriptor,System.Threading.CancellationToken)">
            <summary>
            Creates a new application based on the specified descriptor.
            Note: the default implementation automatically hashes the client
            secret before storing it in the database, for security reasons.
            </summary>
            <param name="descriptor">The application descriptor.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns the unique identifier associated with the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Removes an existing application.
            </summary>
            <param name="application">The application to delete.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.FindByClientIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves an application using its client identifier.
            </summary>
            <param name="identifier">The client identifier associated with the application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns the client application corresponding to the identifier.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves an application using its unique identifier.
            </summary>
            <param name="identifier">The unique identifier associated with the application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns the client application corresponding to the identifier.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.FindByPostLogoutRedirectUriAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves all the applications associated with the specified post_logout_redirect_uri.
            </summary>
            <param name="address">The post_logout_redirect_uri associated with the applications.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>The client applications corresponding to the specified post_logout_redirect_uri.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.FindByRedirectUriAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves all the applications associated with the specified redirect_uri.
            </summary>
            <param name="address">The redirect_uri associated with the applications.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>The client applications corresponding to the specified redirect_uri.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.GetAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns the first element.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns the first element returned when executing the query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.GetAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns the first element.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns the first element returned when executing the query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.GetClientIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the client identifier associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the client identifier associated with the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.GetClientTypeAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the client type associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the client type of the application (by default, "public").
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.GetConsentTypeAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the consent type associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the consent type of the application (by default, "explicit").
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.GetDisplayNameAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the display name associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the display name associated with the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.GetDisplayNamesAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the localized display names associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns all the localized display names associated with the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.GetIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the unique identifier associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the unique identifier associated with the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.GetLocalizedDisplayNameAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the localized display name associated with an application
            and corresponding to the current UI culture or one of its parents.
            If no matching value can be found, the non-localized value is returned.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the matching localized display name associated with the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.GetLocalizedDisplayNameAsync(`0,System.Globalization.CultureInfo,System.Threading.CancellationToken)">
            <summary>
            Retrieves the localized display name associated with an application
            and corresponding to the specified culture or one of its parents.
            If no matching value can be found, the non-localized value is returned.
            </summary>
            <param name="application">The application.</param>
            <param name="culture">The culture (typically <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/>).</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the matching localized display name associated with the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.GetPermissionsAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the permissions associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns all the permissions associated with the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.GetPostLogoutRedirectUrisAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the logout callback addresses associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns all the post_logout_redirect_uri associated with the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.GetRedirectUrisAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the callback addresses associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns all the redirect_uri associated with the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.GetRequirementsAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the requirements associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns all the requirements associated with the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.HasClientTypeAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Determines whether a given application has the specified client type.
            </summary>
            <param name="application">The application.</param>
            <param name="type">The expected client type.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns><c>true</c> if the application has the specified client type, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.HasConsentTypeAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Determines whether a given application has the specified consent type.
            </summary>
            <param name="application">The application.</param>
            <param name="type">The expected consent type.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns><c>true</c> if the application has the specified consent type, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.HasPermissionAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Determines whether the specified permission has been granted to the application.
            </summary>
            <param name="application">The application.</param>
            <param name="permission">The permission.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns><c>true</c> if the application has been granted the specified permission, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.HasRequirementAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Determines whether the specified requirement has been enforced for the specified application.
            </summary>
            <param name="application">The application.</param>
            <param name="requirement">The requirement.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns><c>true</c> if the requirement has been enforced for the specified application, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.ListAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <param name="count">The number of results to return.</param>
            <param name="offset">The number of results to skip.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>All the elements returned when executing the specified query.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.ListAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>All the elements returned when executing the specified query.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.ListAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>All the elements returned when executing the specified query.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.PopulateAsync(`0,OpenIddict.Abstractions.OpenIddictApplicationDescriptor,System.Threading.CancellationToken)">
            <summary>
            Populates the application using the specified descriptor.
            </summary>
            <param name="application">The application.</param>
            <param name="descriptor">The descriptor.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.PopulateAsync(OpenIddict.Abstractions.OpenIddictApplicationDescriptor,`0,System.Threading.CancellationToken)">
            <summary>
            Populates the specified descriptor using the properties exposed by the application.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Updates an existing application.
            </summary>
            <param name="application">The application to update.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.UpdateAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Updates an existing application and replaces the existing secret.
            Note: the default implementation automatically hashes the client
            secret before storing it in the database, for security reasons.
            </summary>
            <param name="application">The application to update.</param>
            <param name="secret">The client secret associated with the application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.UpdateAsync(`0,OpenIddict.Abstractions.OpenIddictApplicationDescriptor,System.Threading.CancellationToken)">
            <summary>
            Updates an existing application.
            </summary>
            <param name="application">The application to update.</param>
            <param name="descriptor">The descriptor used to update the application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.ValidateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Validates the application to ensure it's in a consistent state.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>The validation error encountered when validating the application.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.ValidateClientSecretAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Validates the client_secret associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="secret">The secret that should be compared to the client_secret stored in the database.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.</returns>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns a boolean indicating whether the client secret was valid.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.ValidateRedirectUriAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Validates the redirect_uri to ensure it's associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="address">The address that should be compared to one of the redirect_uri stored in the database.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns a boolean indicating whether the redirect_uri was valid.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.ObfuscateClientSecretAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Obfuscates the specified client secret so it can be safely stored in a database.
            By default, this method returns a complex hashed representation computed using PBKDF2.
            </summary>
            <param name="secret">The client secret.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.ValidateClientSecretAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Validates the specified value to ensure it corresponds to the client secret.
            Note: when overriding this method, using a time-constant comparer is strongly recommended.
            </summary>
            <param name="secret">The client secret to compare to the value stored in the database.</param>
            <param name="comparand">The value stored in the database, which is usually a hashed representation of the secret.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns a boolean indicating whether the specified value was valid.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#CountAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#CountAsync``1(System.Func{System.Linq.IQueryable{System.Object},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#CreateAsync(OpenIddict.Abstractions.OpenIddictApplicationDescriptor,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#CreateAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#CreateAsync(System.Object,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#DeleteAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#FindByClientIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#FindByPostLogoutRedirectUriAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#FindByRedirectUriAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#GetAsync``1(System.Func{System.Linq.IQueryable{System.Object},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#GetAsync``2(System.Func{System.Linq.IQueryable{System.Object},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#GetClientIdAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#GetClientTypeAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#GetConsentTypeAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#GetDisplayNameAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#GetDisplayNamesAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#GetIdAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#GetLocalizedDisplayNameAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#GetLocalizedDisplayNameAsync(System.Object,System.Globalization.CultureInfo,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#GetPermissionsAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#GetPostLogoutRedirectUrisAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#GetRedirectUrisAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#GetRequirementsAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#HasClientTypeAsync(System.Object,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#HasConsentTypeAsync(System.Object,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#HasPermissionAsync(System.Object,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#HasRequirementAsync(System.Object,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#ListAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#ListAsync``1(System.Func{System.Linq.IQueryable{System.Object},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#ListAsync``2(System.Func{System.Linq.IQueryable{System.Object},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#PopulateAsync(OpenIddict.Abstractions.OpenIddictApplicationDescriptor,System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#PopulateAsync(System.Object,OpenIddict.Abstractions.OpenIddictApplicationDescriptor,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#UpdateAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#UpdateAsync(System.Object,OpenIddict.Abstractions.OpenIddictApplicationDescriptor,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#UpdateAsync(System.Object,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#ValidateAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#ValidateClientSecretAsync(System.Object,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.OpenIddict#Abstractions#IOpenIddictApplicationManager#ValidateRedirectUriAsync(System.Object,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Core.OpenIddictAuthorizationManager`1">
            <summary>
            Provides methods allowing to manage the authorizations stored in the store.
            </summary>
            <remarks>
            Applications that do not want to depend on a specific entity type can use the non-generic
            <see cref="T:OpenIddict.Abstractions.IOpenIddictAuthorizationManager"/> instead, for which the actual entity type
            is resolved at runtime based on the default entity type registered in the core options.
            </remarks>
            <typeparam name="TAuthorization">The type of the Authorization entity.</typeparam>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictAuthorizationManager`1.Cache">
            <summary>
            Gets the cache associated with the current manager.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictAuthorizationManager`1.Localizer">
            <summary>
            Gets the string localizer associated with the current manager.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictAuthorizationManager`1.Logger">
            <summary>
            Gets the logger associated with the current manager.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictAuthorizationManager`1.Options">
            <summary>
            Gets the options associated with the current manager.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictAuthorizationManager`1.Store">
            <summary>
            Gets the store associated with the current manager.
            </summary>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Determines the number of authorizations that exist in the database.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of authorizations in the database.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.CountAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Determines the number of authorizations that match the specified query.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of authorizations that match the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.CreateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Creates a new authorization.
            </summary>
            <param name="authorization">The application to create.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.CreateAsync(OpenIddict.Abstractions.OpenIddictAuthorizationDescriptor,System.Threading.CancellationToken)">
            <summary>
            Creates a new authorization based on the specified descriptor.
            </summary>
            <param name="descriptor">The authorization descriptor.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation, whose result returns the authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.CreateAsync(System.Security.Claims.ClaimsPrincipal,System.String,System.String,System.String,System.Collections.Immutable.ImmutableArray{System.String},System.Threading.CancellationToken)">
            <summary>
            Creates a new permanent authorization based on the specified parameters.
            </summary>
            <param name="principal">The principal associated with the authorization.</param>
            <param name="subject">The subject associated with the authorization.</param>
            <param name="client">The client associated with the authorization.</param>
            <param name="type">The authorization type.</param>
            <param name="scopes">The minimal scopes associated with the authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation, whose result returns the authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Removes an existing authorization.
            </summary>
            <param name="authorization">The authorization to delete.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.FindAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the authorizations corresponding to the specified
            subject and associated with the application identifier.
            </summary>
            <param name="subject">The subject associated with the authorization.</param>
            <param name="client">The client associated with the authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>The authorizations corresponding to the subject/client.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.FindAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the authorizations matching the specified parameters.
            </summary>
            <param name="subject">The subject associated with the authorization.</param>
            <param name="client">The client associated with the authorization.</param>
            <param name="status">The authorization status.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>The authorizations corresponding to the criteria.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.FindAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the authorizations matching the specified parameters.
            </summary>
            <param name="subject">The subject associated with the authorization.</param>
            <param name="client">The client associated with the authorization.</param>
            <param name="status">The authorization status.</param>
            <param name="type">The authorization type.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>The authorizations corresponding to the criteria.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.FindAsync(System.String,System.String,System.String,System.String,System.Collections.Immutable.ImmutableArray{System.String},System.Threading.CancellationToken)">
            <summary>
            Retrieves the authorizations matching the specified parameters.
            </summary>
            <param name="subject">The subject associated with the authorization.</param>
            <param name="client">The client associated with the authorization.</param>
            <param name="status">The authorization status.</param>
            <param name="type">The authorization type.</param>
            <param name="scopes">The minimal scopes associated with the authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>The authorizations corresponding to the criteria.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.FindByApplicationIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the list of authorizations corresponding to the specified application identifier.
            </summary>
            <param name="identifier">The application identifier associated with the authorizations.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>The authorizations corresponding to the specified application.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves an authorization using its unique identifier.
            </summary>
            <param name="identifier">The unique identifier associated with the authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns the authorization corresponding to the identifier.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.FindBySubjectAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves all the authorizations corresponding to the specified subject.
            </summary>
            <param name="subject">The subject associated with the authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>The authorizations corresponding to the specified subject.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.GetApplicationIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the optional application identifier associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the application identifier associated with the authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.GetAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns the first element.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns the first element returned when executing the query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.GetAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns the first element.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns the first element returned when executing the query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.GetCreationDateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the creation date associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the creation date associated with the specified authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.GetIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the unique identifier associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the unique identifier associated with the authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.GetScopesAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the scopes associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the scopes associated with the specified authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.GetStatusAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the status associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the status associated with the specified authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.GetSubjectAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the subject associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the subject associated with the specified authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.GetTypeAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the type associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the type associated with the specified authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.HasScopesAsync(`0,System.Collections.Immutable.ImmutableArray{System.String},System.Threading.CancellationToken)">
            <summary>
            Determines whether the specified scopes are included in the authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="scopes">The scopes.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns><c>true</c> if the scopes are included in the authorization, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.HasStatusAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Determines whether a given authorization has the specified status.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="status">The expected status.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns><c>true</c> if the authorization has the specified status, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.HasTypeAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Determines whether a given authorization has the specified type.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="type">The expected type.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns><c>true</c> if the authorization has the specified type, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.ListAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <param name="count">The number of results to return.</param>
            <param name="offset">The number of results to skip.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>All the elements returned when executing the specified query.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.ListAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>All the elements returned when executing the specified query.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.ListAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>All the elements returned when executing the specified query.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.PopulateAsync(`0,OpenIddict.Abstractions.OpenIddictAuthorizationDescriptor,System.Threading.CancellationToken)">
            <summary>
            Populates the authorization using the specified descriptor.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="descriptor">The descriptor.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.PopulateAsync(OpenIddict.Abstractions.OpenIddictAuthorizationDescriptor,`0,System.Threading.CancellationToken)">
            <summary>
            Populates the specified descriptor using the properties exposed by the authorization.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <param name="authorization">The authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.PruneAsync(System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
            Removes the authorizations that are marked as invalid and the ad-hoc ones that have no token attached.
            Only authorizations created before the specified <paramref name="threshold"/> are removed.
            </summary>
            <remarks>
            To ensure ad-hoc authorizations that no longer have any valid/non-expired token
            attached are correctly removed, the tokens should always be pruned first.
            </remarks>
            <param name="threshold">The date before which authorizations are not pruned.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.TryRevokeAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Tries to revoke an authorization.
            </summary>
            <param name="authorization">The authorization to revoke.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns><c>true</c> if the authorization was successfully revoked, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Updates an existing authorization.
            </summary>
            <param name="authorization">The authorization to update.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.UpdateAsync(`0,OpenIddict.Abstractions.OpenIddictAuthorizationDescriptor,System.Threading.CancellationToken)">
            <summary>
            Updates an existing authorization.
            </summary>
            <param name="authorization">The authorization to update.</param>
            <param name="descriptor">The descriptor used to update the authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.ValidateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Validates the authorization to ensure it's in a consistent state.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>The validation error encountered when validating the authorization.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#CountAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#CountAsync``1(System.Func{System.Linq.IQueryable{System.Object},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#CreateAsync(System.Security.Claims.ClaimsPrincipal,System.String,System.String,System.String,System.Collections.Immutable.ImmutableArray{System.String},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#CreateAsync(OpenIddict.Abstractions.OpenIddictAuthorizationDescriptor,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#CreateAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#DeleteAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#FindAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#FindAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#FindAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#FindAsync(System.String,System.String,System.String,System.String,System.Collections.Immutable.ImmutableArray{System.String},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#FindByApplicationIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#FindBySubjectAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#GetApplicationIdAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#GetAsync``1(System.Func{System.Linq.IQueryable{System.Object},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#GetAsync``2(System.Func{System.Linq.IQueryable{System.Object},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#GetIdAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#GetScopesAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#GetStatusAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#GetSubjectAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#GetTypeAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#HasScopesAsync(System.Object,System.Collections.Immutable.ImmutableArray{System.String},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#HasStatusAsync(System.Object,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#HasTypeAsync(System.Object,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#ListAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#ListAsync``1(System.Func{System.Linq.IQueryable{System.Object},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#ListAsync``2(System.Func{System.Linq.IQueryable{System.Object},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#PopulateAsync(OpenIddict.Abstractions.OpenIddictAuthorizationDescriptor,System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#PopulateAsync(System.Object,OpenIddict.Abstractions.OpenIddictAuthorizationDescriptor,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#PruneAsync(System.DateTimeOffset,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#TryRevokeAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#UpdateAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#UpdateAsync(System.Object,OpenIddict.Abstractions.OpenIddictAuthorizationDescriptor,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.OpenIddict#Abstractions#IOpenIddictAuthorizationManager#ValidateAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Core.OpenIddictScopeManager`1">
            <summary>
            Provides methods allowing to manage the scopes stored in the store.
            </summary>
            <remarks>
            Applications that do not want to depend on a specific entity type can use the non-generic
            <see cref="T:OpenIddict.Abstractions.IOpenIddictScopeManager"/> instead, for which the actual entity type
            is resolved at runtime based on the default entity type registered in the core options.
            </remarks>
            <typeparam name="TScope">The type of the Scope entity.</typeparam>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictScopeManager`1.Cache">
            <summary>
            Gets the cache associated with the current manager.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictScopeManager`1.Localizer">
            <summary>
            Gets the string localizer associated with the current manager.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictScopeManager`1.Logger">
            <summary>
            Gets the logger associated with the current manager.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictScopeManager`1.Options">
            <summary>
            Gets the options associated with the current manager.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictScopeManager`1.Store">
            <summary>
            Gets the store associated with the current manager.
            </summary>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Determines the number of scopes that exist in the database.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of scopes in the database.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.CountAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Determines the number of scopes that match the specified query.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of scopes that match the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.CreateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Creates a new scope.
            </summary>
            <param name="scope">The scope to create.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.CreateAsync(OpenIddict.Abstractions.OpenIddictScopeDescriptor,System.Threading.CancellationToken)">
            <summary>
            Creates a new scope based on the specified descriptor.
            </summary>
            <param name="descriptor">The scope descriptor.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation, whose result returns the scope.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Removes an existing scope.
            </summary>
            <param name="scope">The scope to delete.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves a scope using its unique identifier.
            </summary>
            <param name="identifier">The unique identifier associated with the scope.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns the scope corresponding to the identifier.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.FindByNameAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves a scope using its name.
            </summary>
            <param name="name">The name associated with the scope.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns the scope corresponding to the specified name.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.FindByNamesAsync(System.Collections.Immutable.ImmutableArray{System.String},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of scopes using their name.
            </summary>
            <param name="names">The names associated with the scopes.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>The scopes corresponding to the specified names.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.FindByResourceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves all the scopes that contain the specified resource.
            </summary>
            <param name="resource">The resource associated with the scopes.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>The scopes associated with the specified resource.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.GetAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns the first element.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns the first element returned when executing the query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.GetAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns the first element.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns the first element returned when executing the query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.GetDescriptionAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the description associated with a scope.
            </summary>
            <param name="scope">The scope.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the description associated with the specified scope.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.GetDescriptionsAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the localized descriptions associated with an scope.
            </summary>
            <param name="scope">The scope.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns all the localized descriptions associated with the scope.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.GetDisplayNameAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the display name associated with a scope.
            </summary>
            <param name="scope">The scope.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the display name associated with the scope.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.GetDisplayNamesAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the localized display names associated with an scope.
            </summary>
            <param name="scope">The scope.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns all the localized display names associated with the scope.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.GetIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the unique identifier associated with a scope.
            </summary>
            <param name="scope">The scope.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the unique identifier associated with the scope.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.GetLocalizedDisplayNameAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the localized display name associated with an scope
            and corresponding to the current UI culture or one of its parents.
            If no matching value can be found, the non-localized value is returned.
            </summary>
            <param name="scope">The scope.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the matching display name associated with the scope.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.GetLocalizedDisplayNameAsync(`0,System.Globalization.CultureInfo,System.Threading.CancellationToken)">
            <summary>
            Retrieves the localized display name associated with an scope
            and corresponding to the specified culture or one of its parents.
            If no matching value can be found, the non-localized value is returned.
            </summary>
            <param name="scope">The scope.</param>
            <param name="culture">The culture (typically <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/>).</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the matching display name associated with the scope.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.GetLocalizedDescriptionAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the localized description associated with an scope
            and corresponding to the current UI culture or one of its parents.
            If no matching value can be found, the non-localized value is returned.
            </summary>
            <param name="scope">The scope.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the matching localized description associated with the scope.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.GetLocalizedDescriptionAsync(`0,System.Globalization.CultureInfo,System.Threading.CancellationToken)">
            <summary>
            Retrieves the localized description associated with an scope
            and corresponding to the specified culture or one of its parents.
            If no matching value can be found, the non-localized value is returned.
            </summary>
            <param name="scope">The scope.</param>
            <param name="culture">The culture (typically <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/>).</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the matching localized description associated with the scope.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.GetNameAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the name associated with a scope.
            </summary>
            <param name="scope">The scope.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the name associated with the specified scope.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.GetResourcesAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the resources associated with a scope.
            </summary>
            <param name="scope">The scope.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns all the resources associated with the scope.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.ListAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <param name="count">The number of results to return.</param>
            <param name="offset">The number of results to skip.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>All the elements returned when executing the specified query.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.ListAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>All the elements returned when executing the specified query.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.ListAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>All the elements returned when executing the specified query.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.ListResourcesAsync(System.Collections.Immutable.ImmutableArray{System.String},System.Threading.CancellationToken)">
            <summary>
            Lists all the resources associated with the specified scopes.
            </summary>
            <param name="scopes">The scopes.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>All the resources associated with the specified scopes.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.PopulateAsync(`0,OpenIddict.Abstractions.OpenIddictScopeDescriptor,System.Threading.CancellationToken)">
            <summary>
            Populates the scope using the specified descriptor.
            </summary>
            <param name="scope">The scope.</param>
            <param name="descriptor">The descriptor.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.PopulateAsync(OpenIddict.Abstractions.OpenIddictScopeDescriptor,`0,System.Threading.CancellationToken)">
            <summary>
            Populates the specified descriptor using the properties exposed by the scope.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <param name="scope">The scope.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Updates an existing scope.
            </summary>
            <param name="scope">The scope to update.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.UpdateAsync(`0,OpenIddict.Abstractions.OpenIddictScopeDescriptor,System.Threading.CancellationToken)">
            <summary>
            Updates an existing scope.
            </summary>
            <param name="scope">The scope to update.</param>
            <param name="descriptor">The descriptor used to update the scope.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.ValidateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Validates the scope to ensure it's in a consistent state.
            </summary>
            <param name="scope">The scope.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>The validation error encountered when validating the scope.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#CountAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#CountAsync``1(System.Func{System.Linq.IQueryable{System.Object},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#CreateAsync(OpenIddict.Abstractions.OpenIddictScopeDescriptor,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#CreateAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#DeleteAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#FindByNameAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#FindByNamesAsync(System.Collections.Immutable.ImmutableArray{System.String},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#FindByResourceAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#GetAsync``1(System.Func{System.Linq.IQueryable{System.Object},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#GetAsync``2(System.Func{System.Linq.IQueryable{System.Object},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#GetDescriptionAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#GetDescriptionsAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#GetDisplayNameAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#GetDisplayNamesAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#GetIdAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#GetLocalizedDescriptionAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#GetLocalizedDescriptionAsync(System.Object,System.Globalization.CultureInfo,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#GetLocalizedDisplayNameAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#GetLocalizedDisplayNameAsync(System.Object,System.Globalization.CultureInfo,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#GetNameAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#GetResourcesAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#ListAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#ListAsync``1(System.Func{System.Linq.IQueryable{System.Object},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#ListAsync``2(System.Func{System.Linq.IQueryable{System.Object},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#ListResourcesAsync(System.Collections.Immutable.ImmutableArray{System.String},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#PopulateAsync(OpenIddict.Abstractions.OpenIddictScopeDescriptor,System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#PopulateAsync(System.Object,OpenIddict.Abstractions.OpenIddictScopeDescriptor,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#UpdateAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#UpdateAsync(System.Object,OpenIddict.Abstractions.OpenIddictScopeDescriptor,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.OpenIddict#Abstractions#IOpenIddictScopeManager#ValidateAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Core.OpenIddictTokenManager`1">
            <summary>
            Provides methods allowing to manage the tokens stored in the store.
            </summary>
            <remarks>
            Applications that do not want to depend on a specific entity type can use the non-generic
            <see cref="T:OpenIddict.Abstractions.IOpenIddictTokenManager"/> instead, for which the actual entity type
            is resolved at runtime based on the default entity type registered in the core options.
            </remarks>
            <typeparam name="TToken">The type of the Token entity.</typeparam>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictTokenManager`1.Cache">
            <summary>
            Gets the cache associated with the current manager.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictTokenManager`1.Localizer">
            <summary>
            Gets the string localizer associated with the current manager.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictTokenManager`1.Logger">
            <summary>
            Gets the logger associated with the current manager.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictTokenManager`1.Options">
            <summary>
            Gets the options associated with the current manager.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictTokenManager`1.Store">
            <summary>
            Gets the store associated with the current manager.
            </summary>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Determines the number of tokens that exist in the database.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of tokens in the database.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.CountAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Determines the number of tokens that match the specified query.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of tokens that match the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.CreateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Creates a new token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.CreateAsync(OpenIddict.Abstractions.OpenIddictTokenDescriptor,System.Threading.CancellationToken)">
            <summary>
            Creates a new token based on the specified descriptor.
            </summary>
            <param name="descriptor">The token descriptor.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation, whose result returns the token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Removes an existing token.
            </summary>
            <param name="token">The token to delete.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.FindAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the tokens corresponding to the specified
            subject and associated with the application identifier.
            </summary>
            <param name="subject">The subject associated with the token.</param>
            <param name="client">The client associated with the token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>The tokens corresponding to the subject/client.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.FindAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the tokens matching the specified parameters.
            </summary>
            <param name="subject">The subject associated with the token.</param>
            <param name="client">The client associated with the token.</param>
            <param name="status">The token status.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>The tokens corresponding to the criteria.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.FindAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the tokens matching the specified parameters.
            </summary>
            <param name="subject">The subject associated with the token.</param>
            <param name="client">The client associated with the token.</param>
            <param name="status">The token status.</param>
            <param name="type">The token type.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>Tokens corresponding to the criteria.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.FindByApplicationIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the list of tokens corresponding to the specified application identifier.
            </summary>
            <param name="identifier">The application identifier associated with the tokens.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>The tokens corresponding to the specified application.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.FindByAuthorizationIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the list of tokens corresponding to the specified authorization identifier.
            </summary>
            <param name="identifier">The authorization identifier associated with the tokens.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>The tokens corresponding to the specified authorization.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves a token using its unique identifier.
            </summary>
            <param name="identifier">The unique identifier associated with the token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns the token corresponding to the unique identifier.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.FindByReferenceIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the list of tokens corresponding to the specified reference identifier.
            Note: the reference identifier may be hashed or encrypted for security reasons.
            </summary>
            <param name="identifier">The reference identifier associated with the tokens.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns the tokens corresponding to the specified reference identifier.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.FindBySubjectAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the list of tokens corresponding to the specified subject.
            </summary>
            <param name="subject">The subject associated with the tokens.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>The tokens corresponding to the specified subject.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.GetApplicationIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the optional application identifier associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the application identifier associated with the token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.GetAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns the first element.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns the first element returned when executing the query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.GetAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns the first element.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation,
            whose result returns the first element returned when executing the query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.GetAuthorizationIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the optional authorization identifier associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the authorization identifier associated with the token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.GetCreationDateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the creation date associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the creation date associated with the specified token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.GetExpirationDateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the expiration date associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the expiration date associated with the specified token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.GetIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the unique identifier associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the unique identifier associated with the token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.GetPayloadAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the payload associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the payload associated with the specified token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.GetRedemptionDateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the redemption date associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the redemption date associated with the specified token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.GetReferenceIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the reference identifier associated with a token.
            Note: depending on the manager used to create the token,
            the reference identifier may be hashed for security reasons.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the reference identifier associated with the specified token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.GetStatusAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the status associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the status associated with the specified token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.GetSubjectAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the subject associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the subject associated with the specified token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.GetTypeAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the token type associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that can be used to monitor the asynchronous operation,
            whose result returns the token type associated with the specified token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.HasStatusAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Determines whether a given token has the specified status.
            </summary>
            <param name="token">The token.</param>
            <param name="status">The expected status.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns><c>true</c> if the token has the specified status, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.HasTypeAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Determines whether a given token has the specified type.
            </summary>
            <param name="token">The token.</param>
            <param name="type">The expected type.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns><c>true</c> if the token has the specified type, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.ListAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <param name="count">The number of results to return.</param>
            <param name="offset">The number of results to skip.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>All the elements returned when executing the specified query.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.ListAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>All the elements returned when executing the specified query.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.ListAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>All the elements returned when executing the specified query.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.PopulateAsync(`0,OpenIddict.Abstractions.OpenIddictTokenDescriptor,System.Threading.CancellationToken)">
            <summary>
            Populates the token using the specified descriptor.
            </summary>
            <param name="token">The token.</param>
            <param name="descriptor">The descriptor.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.PopulateAsync(OpenIddict.Abstractions.OpenIddictTokenDescriptor,`0,System.Threading.CancellationToken)">
            <summary>
            Populates the specified descriptor using the properties exposed by the token.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.PruneAsync(System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
            Removes the tokens that are marked as invalid or whose attached authorization is no longer valid.
            Only tokens created before the specified <paramref name="threshold"/> are removed.
            </summary>
            <param name="threshold">The date before which tokens are not pruned.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.TryRedeemAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Tries to redeem a token.
            </summary>
            <param name="token">The token to redeem.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns><c>true</c> if the token was successfully redemeed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.TryRejectAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Tries to reject a token.
            </summary>
            <param name="token">The token to reject.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns><c>true</c> if the token was successfully redemeed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.TryRevokeAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Tries to revoke a token.
            </summary>
            <param name="token">The token to revoke.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns><c>true</c> if the token was successfully revoked, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Updates an existing token.
            </summary>
            <param name="token">The token to update.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.UpdateAsync(`0,OpenIddict.Abstractions.OpenIddictTokenDescriptor,System.Threading.CancellationToken)">
            <summary>
            Updates an existing token.
            </summary>
            <param name="token">The token to update.</param>
            <param name="descriptor">The descriptor used to update the token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.ValidateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Validates the token to ensure it's in a consistent state.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>The validation error encountered when validating the token.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.ObfuscateReferenceIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Obfuscates the specified reference identifier so it can be safely stored in a database.
            By default, this method returns a simple hashed representation computed using SHA256.
            </summary>
            <param name="identifier">The client identifier.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#CountAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#CountAsync``1(System.Func{System.Linq.IQueryable{System.Object},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#CreateAsync(OpenIddict.Abstractions.OpenIddictTokenDescriptor,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#CreateAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#DeleteAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#FindAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#FindAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#FindAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#FindByApplicationIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#FindByAuthorizationIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#FindByReferenceIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#FindBySubjectAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#GetApplicationIdAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#GetAsync``1(System.Func{System.Linq.IQueryable{System.Object},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#GetAsync``2(System.Func{System.Linq.IQueryable{System.Object},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#GetAuthorizationIdAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#GetCreationDateAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#GetExpirationDateAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#GetIdAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#GetPayloadAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#GetRedemptionDateAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#GetReferenceIdAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#GetStatusAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#GetSubjectAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#GetTypeAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#HasStatusAsync(System.Object,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#HasTypeAsync(System.Object,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#ListAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#ListAsync``1(System.Func{System.Linq.IQueryable{System.Object},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#ListAsync``2(System.Func{System.Linq.IQueryable{System.Object},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#PopulateAsync(OpenIddict.Abstractions.OpenIddictTokenDescriptor,System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#PopulateAsync(System.Object,OpenIddict.Abstractions.OpenIddictTokenDescriptor,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#PruneAsync(System.DateTimeOffset,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#TryRedeemAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#TryRejectAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#TryRevokeAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#UpdateAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#UpdateAsync(System.Object,OpenIddict.Abstractions.OpenIddictTokenDescriptor,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.OpenIddict#Abstractions#IOpenIddictTokenManager#ValidateAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:OpenIddict.Core.OpenIddictCoreOptions">
            <summary>
            Provides various settings needed to configure the OpenIddict core services.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictCoreOptions.DefaultApplicationType">
            <summary>
            Gets or sets the type corresponding to the default Application entity,
            used by the non-generic application manager and the server/validation services.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictCoreOptions.DefaultAuthorizationType">
            <summary>
            Gets or sets the type corresponding to the default Authorization entity,
            used by the non-generic authorization manager and the server/validation services.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictCoreOptions.DefaultScopeType">
            <summary>
            Gets or sets the type corresponding to the default Scope entity,
            used by the non-generic scope manager and the server/validation services.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictCoreOptions.DefaultTokenType">
            <summary>
            Gets or sets the type corresponding to the default Token entity,
            used by the non-generic token manager and the server/validation services.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictCoreOptions.DisableAdditionalFiltering">
            <summary>
            Gets or sets a boolean indicating whether additional filtering should be disabled,
            so that the OpenIddict managers don't execute a second check to ensure the results
            returned by the stores exactly match the specified query filters, casing included.
            This property SHOULD NOT be set to <c>true</c> except when the underlying stores
            are guaranteed to execute case-sensitive filtering at the database level.
            Disabling this feature MAY result in security vulnerabilities in the other cases.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictCoreOptions.DisableEntityCaching">
            <summary>
            Gets or sets a boolean indicating whether entity caching should be disabled.
            Disabling entity caching may have a noticeable impact on the performance
            of your application and result in multiple queries being sent by the stores.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictCoreOptions.EntityCacheLimit">
            <summary>
            Gets or sets the maximum number of cached entries allowed. When the threshold
            is reached, the cache is automatically compacted to ensure it doesn't grow
            abnormally and doesn't cause a memory starvation or out-of-memory exceptions.
            This property is not used when <see cref="P:OpenIddict.Core.OpenIddictCoreOptions.DisableEntityCaching"/> is <c>true</c>.
            </summary>
        </member>
        <member name="T:OpenIddict.Core.OpenIddictApplicationStoreResolver">
            <summary>
            Exposes a method allowing to resolve an application store.
            </summary>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationStoreResolver.Get``1">
            <summary>
            Returns an application store compatible with the specified application type or throws an
            <see cref="T:System.InvalidOperationException"/> if no store can be built using the specified type.
            </summary>
            <typeparam name="TApplication">The type of the Application entity.</typeparam>
            <returns>An <see cref="T:OpenIddict.Abstractions.IOpenIddictApplicationStore`1"/>.</returns>
        </member>
        <member name="T:OpenIddict.Core.OpenIddictAuthorizationStoreResolver">
            <summary>
            Exposes a method allowing to resolve an authorization store.
            </summary>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationStoreResolver.Get``1">
            <summary>
            Returns an authorization store compatible with the specified authorization type or throws an
            <see cref="T:System.InvalidOperationException"/> if no store can be built using the specified type.
            </summary>
            <typeparam name="TAuthorization">The type of the Authorization entity.</typeparam>
            <returns>An <see cref="T:OpenIddict.Abstractions.IOpenIddictAuthorizationStore`1"/>.</returns>
        </member>
        <member name="T:OpenIddict.Core.OpenIddictScopeStoreResolver">
            <summary>
            Exposes a method allowing to resolve a scope store.
            </summary>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeStoreResolver.Get``1">
            <summary>
            Returns a scope store compatible with the specified scope type or throws an
            <see cref="T:System.InvalidOperationException"/> if no store can be built using the specified type.
            </summary>
            <typeparam name="TScope">The type of the Scope entity.</typeparam>
            <returns>An <see cref="T:OpenIddict.Abstractions.IOpenIddictScopeStore`1"/>.</returns>
        </member>
        <member name="T:OpenIddict.Core.OpenIddictTokenStoreResolver">
            <summary>
            Exposes a method allowing to resolve a token store.
            </summary>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStoreResolver.Get``1">
            <summary>
            Returns a token store compatible with the specified token type or throws an
            <see cref="T:System.InvalidOperationException"/> if no store can be built using the specified type.
            </summary>
            <typeparam name="TToken">The type of the Token entity.</typeparam>
            <returns>An <see cref="T:OpenIddict.Abstractions.IOpenIddictTokenStore`1"/>.</returns>
        </member>
        <member name="T:OpenIddict.Extensions.OpenIddictHelpers">
            <summary>
            Exposes common helpers used by the OpenIddict assemblies.
            </summary>
        </member>
        <member name="M:OpenIddict.Extensions.OpenIddictHelpers.FindGenericBaseType(System.Type,System.Type)">
            <summary>
            Finds the first base type that matches the specified generic type definition.
            </summary>
            <param name="type">The type to introspect.</param>
            <param name="definition">The generic type definition.</param>
            <returns>A <see cref="T:System.Type"/> instance if the base type was found, <c>null</c> otherwise.</returns>
        </member>
        <member name="M:OpenIddict.Extensions.OpenIddictHelpers.FindGenericBaseTypes(System.Type,System.Type)">
            <summary>
            Finds all the base types that matches the specified generic type definition.
            </summary>
            <param name="type">The type to introspect.</param>
            <param name="definition">The generic type definition.</param>
            <returns>A <see cref="T:System.Type"/> instance if the base type was found, <c>null</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder">
            <summary>
            Exposes the necessary methods required to configure the OpenIddict core services.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.
            </summary>
            <param name="services">The services collection.</param>
        </member>
        <member name="P:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.Services">
            <summary>
            Gets the services collection.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.Configure(System.Action{OpenIddict.Core.OpenIddictCoreOptions})">
            <summary>
            Amends the default OpenIddict core configuration.
            </summary>
            <param name="configuration">The delegate used to configure the OpenIddict options.</param>
            <remarks>This extension can be safely called multiple times.</remarks>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.AddApplicationStore``1(Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Adds a custom application store by a custom implementation derived
            from <see cref="T:OpenIddict.Abstractions.IOpenIddictApplicationStore`1"/>.
            Note: when using this overload, the application store
            must be either a non-generic or closed generic service.
            </summary>
            <typeparam name="TStore">The type of the custom store.</typeparam>
            <param name="lifetime">The lifetime of the registered service.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.AddApplicationStore(System.Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Adds a custom application store by a custom implementation derived
            from <see cref="T:OpenIddict.Abstractions.IOpenIddictApplicationStore`1"/>.
            Note: when using this overload, the application store can be
            either a non-generic, a closed or an open generic service.
            </summary>
            <param name="type">The type of the custom store.</param>
            <param name="lifetime">The lifetime of the registered service.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.AddAuthorizationStore``1(Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Adds a custom authorization store by a custom implementation derived
            from <see cref="T:OpenIddict.Abstractions.IOpenIddictAuthorizationStore`1"/>.
            Note: when using this overload, the authorization store
            must be either a non-generic or closed generic service.
            </summary>
            <typeparam name="TStore">The type of the custom store.</typeparam>
            <param name="lifetime">The lifetime of the registered service.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.AddAuthorizationStore(System.Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Adds a custom authorization store by a custom implementation derived
            from <see cref="T:OpenIddict.Abstractions.IOpenIddictAuthorizationStore`1"/>.
            Note: when using this overload, the authorization store can be
            either a non-generic, a closed or an open generic service.
            </summary>
            <param name="type">The type of the custom store.</param>
            <param name="lifetime">The lifetime of the registered service.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.AddScopeStore``1(Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Adds a custom scope store by a custom implementation derived
            from <see cref="T:OpenIddict.Abstractions.IOpenIddictScopeStore`1"/>.
            Note: when using this overload, the scope store
            must be either a non-generic or closed generic service.
            </summary>
            <typeparam name="TStore">The type of the custom store.</typeparam>
            <param name="lifetime">The lifetime of the registered service.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.AddScopeStore(System.Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Adds a custom scope store by a custom implementation derived
            from <see cref="T:OpenIddict.Abstractions.IOpenIddictScopeStore`1"/>.
            Note: when using this overload, the scope store can be
            either a non-generic, a closed or an open generic service.
            </summary>
            <param name="type">The type of the custom store.</param>
            <param name="lifetime">The lifetime of the registered service.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.AddTokenStore``1(Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Adds a custom token store by a custom implementation derived
            from <see cref="T:OpenIddict.Abstractions.IOpenIddictTokenStore`1"/>.
            Note: when using this overload, the token store
            must be either a non-generic or closed generic service.
            </summary>
            <typeparam name="TStore">The type of the custom store.</typeparam>
            <param name="lifetime">The lifetime of the registered service.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.AddTokenStore(System.Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Adds a custom token store by a custom implementation derived
            from <see cref="T:OpenIddict.Abstractions.IOpenIddictTokenStore`1"/>.
            Note: when using this overload, the token store can be
            either a non-generic, a closed or an open generic service.
            </summary>
            <param name="type">The type of the custom store.</param>
            <param name="lifetime">The lifetime of the registered service.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.ReplaceApplicationManager``1">
            <summary>
            Replace the default application manager by a custom manager derived
            from <see cref="T:OpenIddict.Core.OpenIddictApplicationManager`1"/>.
            Note: when using this overload, the application manager
            must be either a non-generic or closed generic service.
            </summary>
            <typeparam name="TManager">The type of the custom manager.</typeparam>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.ReplaceApplicationManager(System.Type)">
            <summary>
            Replace the default application manager by a custom manager derived
            from <see cref="T:OpenIddict.Core.OpenIddictApplicationManager`1"/>.
            Note: when using this overload, the application manager can be
            either a non-generic, a closed or an open generic service.
            </summary>
            <param name="type">The type of the custom manager.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.ReplaceApplicationStoreResolver``1(Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Replaces the default application store resolver by a custom implementation.
            </summary>
            <typeparam name="TResolver">The type of the custom store.</typeparam>
            <param name="lifetime">The lifetime of the registered service.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.ReplaceApplicationStoreResolver(System.Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Replaces the default application store resolver by a custom implementation.
            </summary>
            <param name="type">The type of the custom store.</param>
            <param name="lifetime">The lifetime of the registered service.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.ReplaceAuthorizationManager``1">
            <summary>
            Replace the default authorization manager by a custom manager derived
            from <see cref="T:OpenIddict.Core.OpenIddictAuthorizationManager`1"/>.
            Note: when using this overload, the authorization manager
            must be either a non-generic or closed generic service.
            </summary>
            <typeparam name="TManager">The type of the custom manager.</typeparam>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.ReplaceAuthorizationManager(System.Type)">
            <summary>
            Replace the default authorization manager by a custom manager derived
            from <see cref="T:OpenIddict.Core.OpenIddictAuthorizationManager`1"/>.
            Note: when using this overload, the authorization manager can be
            either a non-generic, a closed or an open generic service.
            </summary>
            <param name="type">The type of the custom manager.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.ReplaceAuthorizationStoreResolver``1(Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Replaces the default authorization store resolver by a custom implementation.
            </summary>
            <typeparam name="TResolver">The type of the custom store.</typeparam>
            <param name="lifetime">The lifetime of the registered service.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.ReplaceAuthorizationStoreResolver(System.Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Replaces the default authorization store resolver by a custom implementation.
            </summary>
            <param name="type">The type of the custom store.</param>
            <param name="lifetime">The lifetime of the registered service.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.ReplaceScopeManager``1">
            <summary>
            Replace the default scope manager by a custom manager
            derived from <see cref="T:OpenIddict.Core.OpenIddictScopeManager`1"/>.
            Note: when using this overload, the scope manager
            must be either a non-generic or closed generic service.
            </summary>
            <typeparam name="TManager">The type of the custom manager.</typeparam>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.ReplaceScopeManager(System.Type)">
            <summary>
            Replace the default scope manager by a custom manager
            derived from <see cref="T:OpenIddict.Core.OpenIddictScopeManager`1"/>.
            Note: when using this overload, the scope manager can be
            either a non-generic, a closed or an open generic service.
            </summary>
            <param name="type">The type of the custom manager.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.ReplaceScopeStoreResolver``1(Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Replaces the default scope store resolver by a custom implementation.
            </summary>
            <typeparam name="TResolver">The type of the custom store.</typeparam>
            <param name="lifetime">The lifetime of the registered service.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.ReplaceScopeStoreResolver(System.Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Replaces the default scope store resolver by a custom implementation.
            </summary>
            <param name="type">The type of the custom store.</param>
            <param name="lifetime">The lifetime of the registered service.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.ReplaceTokenManager``1">
            <summary>
            Replace the default token manager by a custom manager
            derived from <see cref="T:OpenIddict.Core.OpenIddictTokenManager`1"/>.
            Note: when using this overload, the token manager
            must be either a non-generic or closed generic service.
            </summary>
            <typeparam name="TManager">The type of the custom manager.</typeparam>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.ReplaceTokenManager(System.Type)">
            <summary>
            Replace the default token manager by a custom manager
            derived from <see cref="T:OpenIddict.Core.OpenIddictTokenManager`1"/>.
            Note: when using this overload, the token manager can be
            either a non-generic, a closed or an open generic service.
            </summary>
            <param name="type">The type of the custom manager.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.ReplaceTokenStoreResolver``1(Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Replaces the default token store resolver by a custom implementation.
            </summary>
            <typeparam name="TResolver">The type of the custom store.</typeparam>
            <param name="lifetime">The lifetime of the registered service.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.ReplaceTokenStoreResolver(System.Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Replaces the default token store resolver by a custom implementation.
            </summary>
            <param name="type">The type of the custom store.</param>
            <param name="lifetime">The lifetime of the registered service.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.DisableAdditionalFiltering">
            <summary>
            Disables additional filtering so that the OpenIddict managers don't execute a second check
            to ensure the results returned by the stores exactly match the specified query filters,
            casing included. Additional filtering shouldn't be disabled except when the underlying
            stores are guaranteed to execute case-sensitive filtering at the database level.
            Disabling this feature MAY result in security vulnerabilities in the other cases.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.DisableEntityCaching">
            <summary>
            Disables the scoped entity caching applied by the OpenIddict managers.
            Disabling entity caching may have a noticeable impact on the performance
            of your application and result in multiple queries being sent by the stores.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.SetDefaultApplicationEntity``1">
            <summary>
            Configures OpenIddict to use the specified entity as the default application entity.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.SetDefaultApplicationEntity(System.Type)">
            <summary>
            Configures OpenIddict to use the specified entity as the default application entity.
            </summary>
            <param name="type">The application entity type.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.SetDefaultAuthorizationEntity``1">
            <summary>
            Configures OpenIddict to use the specified entity as the default authorization entity.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.SetDefaultAuthorizationEntity(System.Type)">
            <summary>
            Configures OpenIddict to use the specified entity as the default authorization entity.
            </summary>
            <param name="type">The authorization entity type.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.SetDefaultScopeEntity``1">
            <summary>
            Configures OpenIddict to use the specified entity as the default scope entity.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.SetDefaultScopeEntity(System.Type)">
            <summary>
            Configures OpenIddict to use the specified entity as the default scope entity.
            </summary>
            <param name="type">The scope entity type.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.SetDefaultTokenEntity``1">
            <summary>
            Configures OpenIddict to use the specified entity as the default token entity.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.SetDefaultTokenEntity(System.Type)">
            <summary>
            Configures OpenIddict to use the specified entity as the default token entity.
            </summary>
            <param name="type">The token entity type.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.SetEntityCacheLimit(System.Int32)">
            <summary>
            Configures OpenIddict to use the specified entity cache limit,
            after which the internal cache is automatically compacted.
            </summary>
            <param name="limit">The cache limit, in number of entries.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.OpenIddictCoreExtensions">
            <summary>
            Exposes extensions allowing to register the OpenIddict core services.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreExtensions.AddCore(Microsoft.Extensions.DependencyInjection.OpenIddictBuilder)">
            <summary>
            Registers the OpenIddict core services in the DI container.
            </summary>
            <param name="builder">The services builder used by OpenIddict to register new services.</param>
            <remarks>This extension can be safely called multiple times.</remarks>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictCoreExtensions.AddCore(Microsoft.Extensions.DependencyInjection.OpenIddictBuilder,System.Action{Microsoft.Extensions.DependencyInjection.OpenIddictCoreBuilder})">
            <summary>
            Registers the OpenIddict core services in the DI container.
            </summary>
            <param name="builder">The services builder used by OpenIddict to register new services.</param>
            <param name="configuration">The configuration delegate used to configure the core services.</param>
            <remarks>This extension can be safely called multiple times.</remarks>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder"/>.</returns>
        </member>
    </members>
</doc>

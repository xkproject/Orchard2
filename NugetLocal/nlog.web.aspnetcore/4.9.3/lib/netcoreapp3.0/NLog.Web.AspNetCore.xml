<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NLog.Web.AspNetCore</name>
    </assembly>
    <members>
        <member name="T:NLog.Web.AspNetExtensions">
            <summary>
            Helpers for ASP.NET
            </summary>
        </member>
        <member name="M:NLog.Web.AspNetExtensions.SetupNLogServiceLocator(System.IServiceProvider)">
            <summary>
            Override the default <see cref="T:System.IServiceProvider" /> used by the NLog ServiceLocator.
            NLog ServiceLocator uses the <see cref="T:System.IServiceProvider" /> to access context specific services (Ex. <see cref="T:Microsoft.AspNetCore.Http.IHttpContextAccessor" />)
            </summary>
            <remarks>
            Should only be used if the standard approach for configuring NLog is not enough
            </remarks>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:NLog.Web.AspNetExtensions.ConfigureNLog(Microsoft.Extensions.Logging.ILoggingBuilder,System.String)">
            <summary>
            Apply NLog configuration from XML config.
            
            This call is not needed when <see cref="M:NLog.Web.NLogBuilder.ConfigureNLog(System.String)" /> is used.
            </summary>
            <param name="builder">The logging builder</param>
            <param name="configFileName">Path to NLog configuration file, e.g. nlog.config. </param>
            >
            <returns>LogFactory to get loggers, add events etc</returns>
        </member>
        <member name="M:NLog.Web.AspNetExtensions.ConfigureNLog(Microsoft.Extensions.Logging.ILoggingBuilder,NLog.Config.LoggingConfiguration)">
            <summary>
            Configure NLog from API
            
            This call is not needed when <see cref="M:NLog.Web.NLogBuilder.ConfigureNLog(NLog.Config.LoggingConfiguration)" /> is used.
            </summary>
            <param name="builder">The logging builder</param>
            <param name="configuration">Config for NLog</param>
            <returns>LogFactory to get loggers, add events etc</returns>
        </member>
        <member name="M:NLog.Web.AspNetExtensions.AddNLog(Microsoft.Extensions.Logging.ILoggingBuilder,System.String)">
            <summary>
            Apply NLog configuration from XML config.
            </summary>
            <param name="builder">The logging builder</param>
            <param name="configFileName">Path to NLog configuration file, e.g. nlog.config. </param>
        </member>
        <member name="M:NLog.Web.AspNetExtensions.AddNLog(Microsoft.Extensions.Logging.ILoggingBuilder,NLog.Config.LoggingConfiguration)">
            <summary>
            Configure NLog from API
            </summary>
            <param name="builder">The logging builder</param>
            <param name="configuration">Config for NLog</param>
        </member>
        <member name="M:NLog.Web.AspNetExtensions.AddNLog(Microsoft.Extensions.Logging.ILoggingBuilder,NLog.Config.LoggingConfiguration,NLog.Web.NLogAspNetCoreOptions)">
            <summary>
            Configure NLog from API
            </summary>
            <param name="builder">The logging builder</param>
            <param name="configuration">Config for NLog</param>
            <param name="options">Options for logging to NLog with Dependency Injected loggers</param>
        </member>
        <member name="M:NLog.Web.AspNetExtensions.AddNLog(Microsoft.Extensions.Logging.ILoggingBuilder,System.Func{System.IServiceProvider,NLog.LogFactory})">
            <summary>
            Enable NLog as logging provider for Microsoft Extension Logging
            </summary>
            <param name="builder"></param>
            <param name="factoryBuilder">Initialize NLog LogFactory with NLog LoggingConfiguration.</param>
            <returns>ILoggingBuilder for chaining</returns>
        </member>
        <member name="M:NLog.Web.AspNetExtensions.UseNLog(Microsoft.AspNetCore.Hosting.IWebHostBuilder)">
            <summary>
            Use NLog for Dependency Injected loggers.
            </summary>
        </member>
        <member name="M:NLog.Web.AspNetExtensions.UseNLog(Microsoft.AspNetCore.Hosting.IWebHostBuilder,NLog.Web.NLogAspNetCoreOptions)">
            <summary>
            Use NLog for Dependency Injected loggers.
            </summary>
            <param name="builder"></param>
            <param name="options">Options for logging to NLog with Dependency Injected loggers</param>
            <returns></returns>
        </member>
        <member name="M:NLog.Web.AspNetExtensions.UseNLog(Microsoft.Extensions.Hosting.IHostBuilder)">
            <summary>
            Use NLog for Dependency Injected loggers.
            </summary>
        </member>
        <member name="M:NLog.Web.AspNetExtensions.UseNLog(Microsoft.Extensions.Hosting.IHostBuilder,NLog.Web.NLogAspNetCoreOptions)">
            <summary>
            Use NLog for Dependency Injected loggers.
            </summary>
            <param name="builder"></param>
            <param name="options">Options for logging to NLog with Dependency Injected loggers</param>
            <returns></returns>
        </member>
        <member name="T:NLog.Web.SetupBuilderExtensions">
            <summary>
            Extension methods to setup LogFactory options
            </summary>
        </member>
        <member name="M:NLog.Web.SetupBuilderExtensions.LoadConfigurationFromAppSettings(NLog.Config.ISetupBuilder,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Loads NLog LoggingConfiguration from appsettings.json from the NLog-section
            </summary>
        </member>
        <member name="M:NLog.Web.SetupBuilderExtensions.RegisterNLogWeb(NLog.Config.ISetupBuilder,Microsoft.Extensions.Configuration.IConfiguration,System.IServiceProvider)">
            <summary>
            Convience method to register aspnet-layoutrenders in NLog.Web as one-liner before loading NLog.config
            </summary>
            <remarks>
            If not providing <paramref name="serviceProvider"/>, then output from aspnet-layoutrenderers will remain empty
            </remarks>
        </member>
        <member name="T:NLog.Web.SetupExtensionsBuilderExtensions">
            <summary>
            Extension methods to setup NLog extensions, so they are known when loading NLog LoggingConfiguration
            </summary>
        </member>
        <member name="M:NLog.Web.SetupExtensionsBuilderExtensions.RegisterConfigSettings(NLog.Config.ISetupExtensionsBuilder,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Replace with version from NLog.Extension.Logging when it has been released with NLog 4.7
            </summary>
        </member>
        <member name="M:NLog.Web.SetupExtensionsBuilderExtensions.RegisterNLogWeb(NLog.Config.ISetupExtensionsBuilder,System.IServiceProvider)">
            <summary>
            Register the NLog.Web.AspNetCore LayoutRenderers
            </summary>
            <remarks>
            If not providing <paramref name="serviceProvider"/>, then output from aspnet-layoutrenderers will remain empty
            </remarks>
        </member>
        <member name="T:NLog.Web.DependencyInjection.ServiceLocator">
            <summary>
            Service provider
            </summary>
            <remarks>
            This is a anti-pattern, but it works well with NLog, and NLog should also support non-DI
            </remarks>
        </member>
        <member name="P:NLog.Web.DependencyInjection.ServiceLocator.ServiceProvider">
            <summary>
            The current service provider for reading ASP.NET Core session, request etc.
            </summary>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetEnvironmentLayoutRenderer">
            <summary>
            Rendering development environment. <see cref="T:Microsoft.Extensions.Hosting.IHostingEnvironment" />
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetEnvironmentLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Append to target
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetEnvironmentLayoutRenderer.CloseLayoutRenderer">
            <inheritdoc />
        </member>
        <member name="T:NLog.Web.LayoutRenderers.SessionValueType">
            <summary>
            The type of a value
            </summary>
        </member>
        <member name="F:NLog.Web.LayoutRenderers.SessionValueType.String">
            <summary>
            String
            </summary>
        </member>
        <member name="F:NLog.Web.LayoutRenderers.SessionValueType.Int32">
            <summary>
            Int32
            </summary>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetAppBasePathLayoutRenderer">
            <summary>
            Rendering Application BasePath. <see cref="P:Microsoft.Extensions.Hosting.IHostEnvironment.ContentRootPath" /> (Previous IApplicationEnvironment.ApplicationBasePath)
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetAppBasePathLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Append to target
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetAppBasePathLayoutRenderer.CloseLayoutRenderer">
            <inheritdoc />
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetItemValueLayoutRenderer">
            <summary>
            ASP.NET Item variable.
            </summary>
            <remarks>
            Use this layout renderer to insert the value of the specified variable stored
            in the ASP.NET HttpContext.Current.Items dictionary.
            </remarks>
            <example>
            <para>You can set the value of an ASP.NET Item variable by using the following code:</para>
            <code lang="C#">
            <![CDATA[
            HttpContext.Current.Items["myvariable"] = 123;
            HttpContext.Current.Items["stringvariable"] = "aaa BBB";
            HttpContext.Current.Items["anothervariable"] = DateTime.Now;
            ]]>
            </code>
            <para>Example usage of ${aspnet-item}:</para>
            <code lang="NLog Layout Renderer">
            ${aspnet-item:variable=myvariable} - produces "123"
            ${aspnet-item:variable=anothervariable} - produces "01/01/2006 00:00:00"
            ${aspnet-item:variable=anothervariable:culture=pl-PL} - produces "2006-01-01 00:00:00"
            ${aspnet-item:variable=myvariable:padding=5} - produces "  123"
            ${aspnet-item:variable=myvariable:padding=-5} - produces "123  "
            ${aspnet-item:variable=stringvariable:upperCase=true} - produces "AAA BBB"
            </code>
            </example>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetItemValueLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Web.LayoutRenderers.AspNetItemValueLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetItemValueLayoutRenderer.Variable">
            <summary>
            Gets or sets the item variable name.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetItemValueLayoutRenderer.EvaluateAsNestedProperties">
            <summary>
            Gets or sets whether items with a dot are evaluated as properties or not
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetItemValueLayoutRenderer.Culture">
            <summary>
            Gets or sets the culture used for rendering.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetItemValueLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP.NET Item value and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase">
            <summary>
            Layout renderers for ASP.NET rendering multiple key/value pairs.
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase.ItemSeparator">
            <summary>
            Separator between item. Only used for <see cref="F:NLog.Web.Enums.AspNetRequestLayoutOutputFormat.Flat" />
            </summary>
            <remarks>Render with <see cref="M:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase.GetRenderedItemSeparator(NLog.LogEventInfo)" /></remarks>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase.ValueSeparator">
            <summary>
            Separator between value and key. Only used for <see cref="F:NLog.Web.Enums.AspNetRequestLayoutOutputFormat.Flat" />
            </summary>
            <remarks>Render with <see cref="M:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase.GetRenderedValueSeparator(NLog.LogEventInfo)" /></remarks>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase.SingleAsArray">
            <summary>
            Single item in array? Only used for <see cref="F:NLog.Web.Enums.AspNetRequestLayoutOutputFormat.Json" />
            Mutliple items are always in an array.
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase.OutputFormat">
            <summary>
            Determines how the output is rendered. Possible Value: FLAT, JSON. Default is FLAT.
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase.ValuesOnly">
            <summary>
            Only render values if true, otherwise render key/value pairs.
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase.SerializePairs(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Text.StringBuilder)">
            <summary>
            Serialize multiple key/value pairs
            </summary>
            <param name="pairs">The key/value pairs.</param>
            <param name="builder">Add to this builder.</param>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase.SerializePairs(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Serialize multiple key/value pairs
            </summary>
            <param name="pairs">The key/value pairs.</param>
            <param name="builder">Add to this builder.</param>
            <param name="logEvent">Log event for rendering separators.</param>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase.GetRenderedItemSeparator(NLog.LogEventInfo)">
            <summary>
            Get the rendered <see cref="P:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase.ItemSeparator" />
            </summary>
            <param name="logEvent"></param>
            <returns></returns>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase.GetRenderedValueSeparator(NLog.LogEventInfo)">
            <summary>
            Get the rendered <see cref="P:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase.ValueSeparator" />
            </summary>
            <param name="logEvent"></param>
            <returns></returns>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase.AppendQuoted(System.Text.StringBuilder,System.String)">
            <summary>
            Append the value quoted, escape quotes when needed
            </summary>
            <param name="builder"></param>
            <param name="value"></param>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetLayoutRendererBase">
            <summary>
            Base class for ASP.NET layout renderers.
            </summary>
        </member>
        <member name="F:NLog.Web.LayoutRenderers.AspNetLayoutRendererBase._httpContextAccessor">
            <summary>
            Context for DI
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetLayoutRendererBase.HttpContextAccessor">
            <summary>
            Provides access to the current request HttpContext.
            </summary>
            <returns>HttpContextAccessor or <c>null</c></returns>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetLayoutRendererBase.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Validates that the HttpContext is available and delegates append to subclasses.<see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetLayoutRendererBase.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Implemented by subclasses to render request information and append it to the specified <see cref="T:System.Text.StringBuilder" />.
            
            Won't be called if <see cref="P:NLog.Web.LayoutRenderers.AspNetLayoutRendererBase.HttpContextAccessor" /> of <see cref="P:Microsoft.AspNetCore.Http.IHttpContextAccessor.HttpContext" /> is <c>null</c>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetLayoutRendererBase.CloseLayoutRenderer">
            <inheritdoc />
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetLayoutRendererBase.Register(System.String,System.Func{NLog.LogEventInfo,Microsoft.AspNetCore.Http.HttpContext,NLog.Config.LoggingConfiguration,System.Object})">
            <summary>
            Register a custom layout renderer with a callback function <paramref name="func" />. The callback recieves the logEvent and the current configuration.
            </summary>
            <param name="name">Name of the layout renderer - without ${}.</param>
            <param name="func">Callback that returns the value for the layout renderer.</param>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetMvcActionRenderer">
            <summary>
            ASP.NET MVC Controller Name.
            </summary>
            <remarks>
            Use this layout renderer to render the controller name.
            </remarks>
            <example>
            <code lang="NLog Layout Renderer">
            ${aspnet-mvc-action}    
            </code>
            </example>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetMvcActionRenderer.MvcDoAppend(System.Text.StringBuilder,NLog.LogEventInfo,Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Renders the specified ASP.NET Application variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
            <param name="context">The current http context.</param>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetMvcControllerRenderer">
            <summary>
            ASP.NET MVC Controller Name.
            </summary>
            <remarks>
            Use this layout renderer to render the controller name.
            </remarks>
            <example>
            <code lang="NLog Layout Renderer">
            ${aspnet-mvc-controller}    
            </code>
            </example>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetMvcControllerRenderer.MvcDoAppend(System.Text.StringBuilder,NLog.LogEventInfo,Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Renders the specified ASP.NET Application variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
            <param name="context">The current http context.</param>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetMvcLayoutRendererBase">
            <summary>
            Base Class for ASP.NET MVC Renderer.
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetMvcLayoutRendererBase.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP.NET Application variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetMvcLayoutRendererBase.MvcDoAppend(System.Text.StringBuilder,NLog.LogEventInfo,Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Renders the specified ASP.NET Application variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
            <param name="context">The current http context.</param>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestContentTypeLayoutRenderer">
            <summary>
            ASP.NET HttpRequest Content-Type Header
            </summary>
            <example>
            <code lang="NLog Layout Renderer">
            ${aspnet-request-contenttype}
            </code>
            </example>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestContentTypeLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP.NET Application variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestCookieLayoutRenderer">
            <summary>
            ASP.NET Request Cookie
            </summary>
            <para>Example usage of ${aspnet-request-cookie}</para>
            <example>
            <code lang="NLog Layout Renderer">
            ${aspnet-request-cookie:OutputFormat=Flat}
            ${aspnet-request-cookie:OutputFormat=Json}
            ${aspnet-request-cookie:OutputFormat=Json:CookieNames=username}
            ${aspnet-request-cookie:OutputFormat=Json:Exclude=access_token}
            </code>
            </example>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestCookieLayoutRenderer.CookieNames">
            <summary>
            Cookie names to be rendered.
            If <c>null</c> or empty array, all cookies will be rendered.
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestCookieLayoutRenderer.Exclude">
            <summary>
            Gets or sets the keys to exclude from the output. If omitted, none are excluded.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestCookieLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Web.LayoutRenderers.AspNetRequestCookieLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestCookieLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the ASP.NET Cookie appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestFormLayoutRenderer">
            <summary>
            ASP.NET Request Form Data
            </summary>
            <example>
            <para>Example usage of ${aspnet-request-form}:</para>
            <code lang="NLog Layout Renderer">
            ${aspnet-request-form} - Produces - All Form Data from the Request with each key/value pair separated by a comma.
            ${aspnet-request-form:Include=id,name} - Produces - Only Form Data from the Request with keys "id" and "name".
            ${aspnet-request-form:Exclude=id,name} - Produces - All Form Data from the Request except the keys "id" and "name".
            ${aspnet-request-form:Include=id,name:Exclude=id} - Produces - Only Form Data from the Request with key "name" (<see cref="P:NLog.Web.LayoutRenderers.AspNetRequestFormLayoutRenderer.Exclude" /> takes precedence over <see cref="P:NLog.Web.LayoutRenderers.AspNetRequestFormLayoutRenderer.Include" />).
            ${aspnet-request-form:ItemSeparator=${newline}} - Produces - All Form Data from the Request with each key/value pair separated by a new line.
            </code>
            </example>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestFormLayoutRenderer.Include">
            <summary>
            Gets or sets the form keys to include in the output.  If omitted, all are included.  <see cref="P:NLog.Web.LayoutRenderers.AspNetRequestFormLayoutRenderer.Exclude" /> takes precedence over <see cref="P:NLog.Web.LayoutRenderers.AspNetRequestFormLayoutRenderer.Include" />.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestFormLayoutRenderer.Exclude">
            <summary>
            Gets or sets the form keys to exclude from the output.  If omitted, none are excluded.  <see cref="P:NLog.Web.LayoutRenderers.AspNetRequestFormLayoutRenderer.Exclude" /> takes precedence over <see cref="P:NLog.Web.LayoutRenderers.AspNetRequestFormLayoutRenderer.Include" />.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestFormLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Web.LayoutRenderers.AspNetRequestFormLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestFormLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the Form Collection from the HttpRequest and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder"></param>
            <param name="logEvent"></param>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestHeadersLayoutRenderer">
            <summary>
            ASP.NET Request Headers
            </summary>
            <para>Example usage of ${aspnet-request-headers}</para>
            <example>
            <code lang="NLog Layout Renderer">
            ${aspnet-request-headers:OutputFormat=Flat}
            ${aspnet-request-headers:OutputFormat=Json}
            ${aspnet-request-headers:OutputFormat=Json:HeaderNames=username}
            ${aspnet-request-headers:OutputFormat=Json:Exclude=access_token}
            </code>
            </example>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestHeadersLayoutRenderer.HeaderNames">
            <summary>
            Header names to be rendered.
            If <c>null</c> or empty array, all headers will be rendered.
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestHeadersLayoutRenderer.Exclude">
            <summary>
            Gets or sets the keys to exclude from the output. If omitted, none are excluded.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestHeadersLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Web.LayoutRenderers.AspNetRequestHeadersLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestHeadersLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the ASP.NET Headers appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestHostLayoutRenderer">
            <summary>
            ASP.NET host.
            </summary>
            <remarks>
            Use this layout renderer host.
            </remarks>
            <example>
            <code lang="NLog Layout Renderer">
            ${aspnet-request-host}    
            </code>
            </example>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestHostLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP.NET Application variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestHttpMethodRenderer">
            <summary>
            ASP.NET Http Request Method.
            </summary>
            <para>Example usage of ${aspnet-request-method}:</para>
            <example>
            <code lang="NLog Layout Renderer">
            ${aspnet-request-method} - Produces - Post.
            </code>
            </example>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestHttpMethodRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            ASP.NET Http Request Method
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestIpLayoutRenderer">
            <summary>
            Render the request IP for ASP.NET Core
            </summary>
            <example>
            <code lang="NLog Layout Renderer">
            ${aspnet-request-ip}
            </code>
            </example>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestIpLayoutRenderer.ForwardedForHeader">
            <summary>
            The header name to check for the Forwarded-For. Default "X-Forwarded-For". Needs <see cref="P:NLog.Web.LayoutRenderers.AspNetRequestIpLayoutRenderer.CheckForwardedForHeader"/>
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestIpLayoutRenderer.CheckForwardedForHeader">
            <summary>
            Gets or sets whether the renderer should check value of <see cref="P:NLog.Web.LayoutRenderers.AspNetRequestIpLayoutRenderer.ForwardedForHeader"/> header
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestIpLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Render IP
            </summary>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestPostedBody">
            <summary>
            ASP.NET posted body, e.g. FORM or Ajax POST
            </summary>
            <para>Example usage of ${aspnet-request-posted-body}:</para>
            <example>
            <code lang="NLog Layout Renderer">
            ${aspnet-request-posted-body} - Produces - {username:xyz,password:xyz}
            </code>
            </example>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestPostedBody.MaxContentLength">
            <summary>
            Max size in bytes of the body. Skip logging of the body when larger.
            Default 30720 Bytes = 30 KiB 
            (0 = No limit, -1 = No Buffer Limit)
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestPostedBody.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the ASP.NET posted body
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestPostedBody.TryEnableBuffering(Microsoft.AspNetCore.Http.HttpRequest,System.Nullable{System.Int64},System.IO.Stream@)">
            <returns>Can seek now?</returns>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetQueryStringLayoutRenderer">
            <summary>
            ASP.NET Request Cookie
            </summary>
            <para>Example usage of ${aspnet-request-querystring}:</para>
            <example>
            <code lang="NLog Layout Renderer">
            ${aspnet-request-querystring:OutputFormat=Flat}
            ${aspnet-request-querystring:OutputFormat=Json}
            </code>
            </example>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetQueryStringLayoutRenderer.QueryStringKeys">
            <summary>
            List Query Strings' Key to be rendered from Request.
            If empty, then render all querystrings
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetQueryStringLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP.NET Application variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder"></param>
            <param name="logEvent"></param>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestReferrerRenderer">
            <summary>
            ASP.NET Request Referrer
            </summary>
            <example>
            <para>Example usage of ${aspnet-request-referrer}:</para>
            <code lang="NLog Layout Renderer">
            ${aspnet-request-referrer} - Produces - Referrer URL String from the Request.
            </code>
            </example>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestReferrerRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the Referrer URL from the HttpRequest <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestUrlRenderer">
            <summary>
            ASP.NET Request URL
            </summary>
            <para>Example usage of ${aspnet-request-url}:</para>
            <example>
            <code lang="NLog Layout Renderer">
            ${aspnet-request-url:IncludeQueryString=true} - produces http://www.exmaple.com/?t=1
            ${aspnet-request-url:IncludeQueryString=false} - produces http://www.exmaple.com/
            ${aspnet-request-url:IncludePort=true} - produces http://www.exmaple.com:80/
            ${aspnet-request-url:IncludePort=false} - produces http://www.exmaple.com/
            ${aspnet-request-url:IncludeScheme=false} - produces www.exmaple.com/
            ${aspnet-request-url:IncludePort=true:IncludeQueryString=true} - produces http://www.exmaple.com:80/?t=1
            </code>
            </example>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestUrlRenderer.IncludeQueryString">
            <summary>
            To specify whether to include / exclude the Query string. Default is false.
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestUrlRenderer.IncludePort">
            <summary>
            To specify whether to include / exclude the Port. Default is false.
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestUrlRenderer.IncludeHost">
            <summary>
            To specify whether to exclude / include the host. Default is true.
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestUrlRenderer.IncludeScheme">
            <summary>
            To specify whether to exclude / include the scheme. Default is true.
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestUrlRenderer.UseRawTarget">
            <summary>
            To specify whether to use raw path and full query. Default is false.
            See https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.features.ihttprequestfeature.rawtarget
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestUrlRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the Request URL from the HttpRequest
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestUserAgent">
            <summary>
            ASP.NET User Agent
            </summary>
            <para>Example usage of ${aspnet-request-useragent}:</para>
            <example>
            <code lang="NLog Layout Renderer">
            ${aspnet-request-useragent} - Produces - User Agent String from the Request.
            </code>
            </example>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestUserAgent.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the ASP.NET User Agent
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestValueLayoutRenderer">
            <summary>
            ASP.NET Request variable.
            </summary>
            <remarks>
            Use this layout renderer to insert the value of the specified parameter of the
            ASP.NET Request object.
            </remarks>
            <example>
            <para>Example usage of ${aspnet-request}:</para>
            <code lang="NLog Layout Renderer">
            ${aspnet-request:item=v}
            ${aspnet-request:querystring=v}
            ${aspnet-request:form=v}
            ${aspnet-request:cookie=v}
            ${aspnet-request:header=h}
            ${aspnet-request:serverVariable=v}
            </code>
            </example>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestValueLayoutRenderer.Item">
            <summary>
            Gets or sets the item name. The QueryString, Form, Cookies, or ServerVariables collection variables having the specified name are rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestValueLayoutRenderer.QueryString">
            <summary>
            Gets or sets the QueryString variable to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestValueLayoutRenderer.Form">
            <summary>
            Gets or sets the form variable to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestValueLayoutRenderer.Cookie">
            <summary>
            Gets or sets the cookie to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestValueLayoutRenderer.Header">
            <summary>
            Gets or sets the Headers item to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestValueLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP.NET Request variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetResponseStatusCodeRenderer">
            <summary>
            ASP.NET Response Status Code.
            </summary>
            <para>Example usage of ${aspnet-response-statuscode}:</para>
            <example>
            <code lang="NLog Layout Renderer">
            ${aspnet-response-statuscode} - Produces - 200.
            </code>
            </example>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetResponseStatusCodeRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            ASP.NET Http Response Status Code
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetSessionIdLayoutRenderer">
            <summary>
            ASP.NET Session ID.
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetSessionIdLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the ASP.NET Session ID appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetSessionValueLayoutRenderer">
            <summary>
            ASP.NET Session variable.
            </summary>
            <remarks>
            Use this layout renderer to insert the value of the specified variable stored
            in the ASP.NET Session dictionary.
            </remarks>
            <example>
            <para>You can set the value of an ASP.NET Session variable by using the following code:</para>
            <code lang="C#">
            <![CDATA[
            HttpContext.Current.Session["myvariable"] = 123;
            HttpContext.Current.Session["stringvariable"] = "aaa BBB";
            HttpContext.Current.Session["anothervariable"] = DateTime.Now;
            ]]>
            </code>
            <para>Example usage of ${aspnet-session}:</para>
            <code lang="NLog Layout Renderer">
            ${aspnet-session:variable=myvariable} - produces "123"
            ${aspnet-session:variable=anothervariable} - produces "01/01/2006 00:00:00"
            ${aspnet-session:variable=anothervariable:culture=pl-PL} - produces "2006-01-01 00:00:00"
            ${aspnet-session:variable=myvariable:padding=5} - produces "  123"
            ${aspnet-session:variable=myvariable:padding=-5} - produces "123  "
            ${aspnet-session:variable=stringvariable:upperCase=true} - produces "AAA BBB"
            </code>
            </example>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetSessionValueLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Web.LayoutRenderers.AspNetSessionValueLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetSessionValueLayoutRenderer.Variable">
            <summary>
            Gets or sets the session variable name.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetSessionValueLayoutRenderer.EvaluateAsNestedProperties">
            <summary>
            Gets or sets whether variables with a dot are evaluated as properties or not
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetSessionValueLayoutRenderer.Culture">
            <summary>
            Gets or sets the culture used for rendering.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetSessionValueLayoutRenderer.ValueType">
            <summary>
            The hype of the value.
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetSessionValueLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP.NET Session value and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetTraceIdentifierLayoutRenderer">
            <summary>
            ASP.NET Request TraceIdentifier.
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetTraceIdentifierLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetTraceIdentifierLayoutRenderer.IgnoreActivityId">
            <summary>
            Ignore the System.Diagnostics.Activity.Current.Id value (AspNetCore3 uses ActivityId by default)
            </summary>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetUserAuthTypeLayoutRenderer">
            <summary>
            ASP.NET User variable.
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetUserAuthTypeLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP.NET User.Identity.AuthenticationType variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetUserIdentityLayoutRenderer">
            <summary>
            ASP.NET User variable.
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetUserIdentityLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP.NET User.Identity.Name variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetWebRootPathLayoutRenderer">
            <summary>
            Rendering WebRootPath. <see cref="T:Microsoft.AspNetCore.Hosting.IHostingEnvironment" />
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetWebRootPathLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Append to target
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetWebRootPathLayoutRenderer.CloseLayoutRenderer">
            <inheritdoc />
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AssemblyVersionLayoutRenderer">
            <summary>
            Extend NLog.LayoutRenderers.AssemblyVersionLayoutRenderer with ASP.NET Full and Core support
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AssemblyVersionLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc />
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AssemblyVersionLayoutRenderer.GetAssembly">
            <inheritdoc />
        </member>
        <member name="T:NLog.Web.LayoutRenderers.IISInstanceNameLayoutRenderer">
            <summary>
            Rendering site name in IIS. <see cref="T:Microsoft.Extensions.Hosting.IHostingEnvironment" />
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.IISInstanceNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Append to target
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.IISInstanceNameLayoutRenderer.CloseLayoutRenderer">
            <inheritdoc />
        </member>
        <member name="T:NLog.Web.NLogAspNetCoreOptions">
            <summary>
            Options for ASP.NET Core and NLog
            </summary>
        </member>
        <member name="P:NLog.Web.NLogAspNetCoreOptions.RegisterHttpContextAccessor">
            <summary>
            Register the HttpContextAccessor when not yet registed. Default <c>true</c>
            </summary>
            <remarks>needed for various layout renderers</remarks>
        </member>
        <member name="P:NLog.Web.NLogAspNetCoreOptions.Default">
            <summary>
            The default options
            </summary>
        </member>
        <member name="T:NLog.Web.NLogBuilder">
            <summary>
            NLog helper for ASP.NET Standard 2
            </summary>
        </member>
        <member name="M:NLog.Web.NLogBuilder.ConfigureNLog(System.String)">
            <summary>
            Configure NLog from XML config.
            </summary>
            <param name="configFileName">Path to NLog configuration file, e.g. nlog.config. </param>
            >
            <returns>LogFactory to get loggers, add events etc</returns>
        </member>
        <member name="M:NLog.Web.NLogBuilder.ConfigureNLog(NLog.Config.LoggingConfiguration)">
            <summary>
            Configure NLog from API
            </summary>
            <param name="configuration">Config for NLog</param>
            <returns>LogFactory to get loggers, add events etc</returns>
        </member>
        <member name="T:NLog.Web.Enums.AspNetRequestLayoutOutputFormat">
            <summary>
            To control the Renderer Output formatting.
            </summary>
        </member>
        <member name="F:NLog.Web.Enums.AspNetRequestLayoutOutputFormat.Flat">
            <summary>
            Use this format for rendering the output value as a flat string.
            </summary>
        </member>
        <member name="F:NLog.Web.Enums.AspNetRequestLayoutOutputFormat.Json">
            <summary>
            Use this format for rendering the output value as a json formatted string.
            </summary>
        </member>
        <member name="M:NLog.Web.Internal.PropertyReader.GetValue``1(System.String,``0,System.Func{``0,System.String,System.Object},System.Boolean)">
            <summary>
            Get value of a property
            </summary>
            <param name="key">key</param>
            <param name="container">Container to perform value lookup using key</param>
            <param name="getVal">function to get a value with this key</param>
            <param name="evaluateAsNestedProperties">evaluate <paramref name="key" /> as a nested property path. E.g. A.B is property B inside A.</param>
            <returns>value</returns>
        </member>
        <member name="T:NLog.Web.AspNetCore.LayoutRenderers.AspNetUserIsAuthenticatedLayoutRenderer">
            <summary>
            Is the user authenticated? 0 = not authenticated, 1 = authenticated
            
            ${aspnet-user-isAuthenticated}
            </summary>
        </member>
        <member name="M:NLog.Web.AspNetCore.LayoutRenderers.AspNetUserIsAuthenticatedLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Render 0 or 1
            </summary>
            <param name="builder"></param>
            <param name="logEvent"></param>
        </member>
    </members>
</doc>

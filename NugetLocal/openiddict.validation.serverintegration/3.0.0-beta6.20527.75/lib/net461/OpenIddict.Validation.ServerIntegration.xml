<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenIddict.Validation.ServerIntegration</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Extensions.DependencyInjection.OpenIddictValidationServerIntegrationBuilder">
            <summary>
            Exposes the necessary methods required to configure the OpenIddict validation services.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictValidationServerIntegrationBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictValidationBuilder"/>.
            </summary>
            <param name="services">The services collection.</param>
        </member>
        <member name="P:Microsoft.Extensions.DependencyInjection.OpenIddictValidationServerIntegrationBuilder.Services">
            <summary>
            Gets the services collection.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictValidationServerIntegrationBuilder.Configure(System.Action{OpenIddict.Validation.ServerIntegration.OpenIddictValidationServerIntegrationOptions})">
            <summary>
            Amends the default OpenIddict validation/server integration configuration.
            </summary>
            <param name="configuration">The delegate used to configure the OpenIddict options.</param>
            <remarks>This extension can be safely called multiple times.</remarks>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictValidationServerIntegrationBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictValidationServerIntegrationBuilder.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictValidationServerIntegrationBuilder.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictValidationServerIntegrationBuilder.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.OpenIddictValidationServerIntegrationExtensions">
            <summary>
            Exposes extensions allowing to register the OpenIddict validation/server integration services.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictValidationServerIntegrationExtensions.UseLocalServer(Microsoft.Extensions.DependencyInjection.OpenIddictValidationBuilder)">
            <summary>
            Registers the OpenIddict validation/server integration services in the DI container
            and automatically imports the configuration from the local OpenIddict server.
            </summary>
            <param name="builder">The services builder used by OpenIddict to register new services.</param>
            <remarks>This extension can be safely called multiple times.</remarks>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictValidationBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictValidationServerIntegrationExtensions.UseLocalServer(Microsoft.Extensions.DependencyInjection.OpenIddictValidationBuilder,System.Action{Microsoft.Extensions.DependencyInjection.OpenIddictValidationServerIntegrationBuilder})">
            <summary>
            Registers the OpenIddict validation/server integration services in the DI container
            and automatically imports the configuration from the local OpenIddict server.
            </summary>
            <param name="builder">The services builder used by OpenIddict to register new services.</param>
            <param name="configuration">The configuration delegate used to configure the validation services.</param>
            <remarks>This extension can be safely called multiple times.</remarks>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder"/>.</returns>
        </member>
        <member name="T:OpenIddict.Validation.ServerIntegration.OpenIddictValidationServerIntegrationConfiguration">
            <summary>
            Contains the methods required to ensure that the OpenIddict validation/server integration configuration is valid.
            </summary>
        </member>
        <member name="M:OpenIddict.Validation.ServerIntegration.OpenIddictValidationServerIntegrationConfiguration.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{OpenIddict.Server.OpenIddictServerOptions})">
            <summary>
            Creates a new instance of the <see cref="T:OpenIddict.Validation.ServerIntegration.OpenIddictValidationServerIntegrationConfiguration"/> class.
            </summary>
            <param name="options">The OpenIddict server options.</param>
        </member>
        <member name="M:OpenIddict.Validation.ServerIntegration.OpenIddictValidationServerIntegrationConfiguration.Configure(OpenIddict.Validation.OpenIddictValidationOptions)">
            <summary>
            Populates the default OpenIddict validation/server integration options
            and ensures that the configuration is in a consistent and valid state.
            </summary>
            <param name="options">The options instance to initialize.</param>
        </member>
        <member name="M:OpenIddict.Validation.ServerIntegration.OpenIddictValidationServerIntegrationConfiguration.PostConfigure(System.String,OpenIddict.Validation.OpenIddictValidationOptions)">
            <summary>
            Populates the default OpenIddict validation/server integration options
            and ensures that the configuration is in a consistent and valid state.
            </summary>
            <param name="name">The name of the options instance to configure, if applicable.</param>
            <param name="options">The options instance to initialize.</param>
        </member>
        <member name="T:OpenIddict.Validation.ServerIntegration.OpenIddictValidationServerIntegrationOptions">
            <summary>
            Provides various settings needed to configure the OpenIddict validation/server integration.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
    </members>
</doc>

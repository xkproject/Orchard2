@model EditOpenIdApplicationViewModel
@using OpenIddict.Abstractions;
@using OrchardCore.OpenId.ViewModels;
@using OrchardCore.OpenId.Settings;
@{
    var settings = ViewData[nameof(OpenIdServerSettings)] as OpenIdServerSettings;
}
<h1>@RenderTitleSegments(T["Edit an application"])</h1>

<div asp-validation-summary="ModelOnly"></div>
<form asp-action="Edit" method="post">
    <input type="hidden" asp-for="Id" />
    <div class="form-group" asp-validation-class-for="ClientId">
        <label asp-for="ClientId">@T["Client Id"]</label>
        <span asp-validation-for="ClientId" class="text-danger">@T["The Client Id is required."]</span>
        <input asp-for="ClientId" class="form-control" autofocus />
    </div>
    <div class="form-group" asp-validation-class-for="DisplayName">
        <label asp-for="DisplayName">@T["Display Name"]</label>
        <span asp-validation-for="DisplayName" class="text-danger">@T["The Display Name is required."]</span>
        <input asp-for="DisplayName" class="form-control" autofocus />
    </div>
    <div class="form-group" asp-validation-class-for="Type">
        <label asp-for="Type">@T["Type"]</label>
        <select asp-for="Type" class="form-control">
            <option value="@OpenIddictConstants.ClientTypes.Confidential">@T["Confidential client"]</option>
            <option value="@OpenIddictConstants.ClientTypes.Public">@T["Public client"]</option>
        </select>
        <div class="hint">@T["Confidential applications MUST send their client secret when communicating with the token and revocation endpoints. This guarantees that only the legit client can exchange an authorization code or get a refresh token."]</div>
    </div>
    <fieldset class="form-group">
        <div class="form-check">
            <label class="form-check-label">
                <input asp-for="UpdateClientSecret" type="checkbox" data-toggle="collapse" data-target="#clientSecretGroup" class="form-check-input" checked="@Model.UpdateClientSecret"/>
                @T["Set a new Client Secret"]
                <span asp-validation-for="UpdateClientSecret" class="text-danger">@T["Set a new Client Secret is required."]</span>
            </label>
        </div>
    </fieldset>
    <div class="form-group collapse" id="clientSecretGroup" name="clientSecretGroup">
        <div class="form-group" asp-validation-class-for="ClientSecret">
            <label asp-for="ClientSecret">@T["Client Secret"]</label>
            <span asp-validation-for="ClientSecret" class="text-danger"></span>
            <input asp-for="ClientSecret" class="form-control" autofocus />
        </div>
    </div>

    <h3>Flows</h3>
    <fieldset id="AllowAuthorizationCodeFlowFieldSet" class="form-group collapse" asp-validation-class-for="AllowAuthorizationCodeFlow">
        <div class="form-check">
            <label class="form-check-label">
                <input asp-for="AllowAuthorizationCodeFlow" type="checkbox" data-toggle="collapse" data-target="#AllowAuthorizationCodeFlowRecommendedHint" class="form-check-input" checked="@Model.AllowAuthorizationCodeFlow" />
                @T["Allow Authorization Code Flow"]
            </label>
        </div>
        <div class="hint">@T["More info:"] <a href="http://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth">http://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth</a></div>
        <div id="AllowAuthorizationCodeFlowRecommendedHint" class="hint collapse">@T["Recommended Parameters:"] grant_type = 'code', client_id, client_secret,  scope ('openid, profile, roles)')</div>
    </fieldset>

    <fieldset id="AllowImplicitFlowFieldSet" class="form-group collapse" asp-validation-class-for="AllowImplicitFlow">
        <div class="form-check">
            <label class="form-check-label">
                <input asp-for="AllowImplicitFlow" type="checkbox" data-toggle="collapse" data-target="#AllowImplicitFlowRecommendedHint" class="form-check-input" checked="@Model.AllowImplicitFlow" />
                @T["Allow Implicit Flow"]
            </label>
        </div>
        <div class="hint">@T["More info:"] <a href="http://openid.net/specs/openid-connect-core-1_0.html#ImplicitFlowAuth">http://openid.net/specs/openid-connect-core-1_0.html#ImplicitFlowAuth</a></div>
        <div id="AllowImplicitFlowRecommendedHint" class="hint collapse">@T["Recommended Parameters:"] grant_type = 'id_token token', client_id, client_secret, redirect_uri ='', nonce,  scope ('openid, profile, roles')</div>
    </fieldset>

    <fieldset id="AllowPasswordFlowFieldSet" class="form-group collapse" asp-validation-class-for="AllowPasswordFlow">
        <div class="form-check">
            <label class="form-check-label">
                <input asp-for="AllowPasswordFlow" type="checkbox" data-toggle="collapse" data-target="#AllowPasswordFlowRecommendedHint" class="form-check-input" checked="@Model.AllowPasswordFlow" />
                @T["Allow Password Flow"]
            </label>
        </div>
        <div class="hint">@T["More info:"] <a href="https://tools.ietf.org/html/rfc6749#section-1.3.3">https://tools.ietf.org/html/rfc6749#section-1.3.3</a></div>
        <div id="AllowPasswordFlowRecommendedHint" class="hint collapse">@T["Recommended Parameters:"] grant_type = 'password', client_id, client_secret, username, password,  scope ('openid, profile, roles)')</div>
    </fieldset>

    <fieldset id="AllowClientCredentialsFlowFieldSet" class="form-group collapse" asp-validation-class-for="AllowClientCredentialsFlow">
        <div class="form-check">
            <label class="form-check-label">
                <input asp-for="AllowClientCredentialsFlow" type="checkbox" data-toggle="collapse" data-target="#AllowClientCredentialsFlowRecommendedHint" class="form-check-input" checked="@Model.AllowClientCredentialsFlow" />
                @T["Allow Client Credentials Flow"]
            </label>
        </div>
        <div class="hint">@T["More info:"] <a href="https://tools.ietf.org/html/rfc6749#section-1.3.4">https://tools.ietf.org/html/rfc6749#section-1.3.4</a></div>
        <div id="AllowClientCredentialsFlowRecommendedHint" class="hint collapse">@T["Recommended Parameters:"] grant_type = 'client_credentials', client_id, client_secret,  scope ('openid, profile, roles')</div>
    </fieldset>

    <fieldset id="AllowRefreshTokenFlowFieldSet" class="form-group collapse" asp-validation-class-for="AllowRefreshTokenFlow">
        <div class="form-check">
            <label class="form-check-label">
                <input asp-for="AllowRefreshTokenFlow" type="checkbox" data-toggle="collapse" data-target="#AllowRefreshTokenFlowRecommendedHint" class="form-check-input" checked="@Model.AllowRefreshTokenFlow" disabled=@((Model.AllowPasswordFlow || Model.AllowAuthorizationCodeFlow) ? null : "") />
                @T["Allow Refresh Token Flow"]
            </label>
        </div>
        <div class="hint">@T["More info:"] <a href="http://openid.net/specs/openid-connect-core-1_0.html#RefreshTokens">http://openid.net/specs/openid-connect-core-1_0.html#RefreshTokens</a></div>
        <div id="AllowRefreshTokenFlowRecommendedHint" class="hint collapse">@T["Recommended Parameters:"] grant_type = 'refresh_token', client_id, client_secret, refresh_token</div>
    </fieldset>

    <div id="RedirectSection" class="form-group collapse">
        <div asp-validation-class-for="RedirectUris">
            <label asp-for="RedirectUris">@T["Redirect Uris"]</label>
            <span asp-validation-for="RedirectUris" class="text-danger">@T["At least one Redirect Uri is required."]</span>
            <input asp-for="RedirectUris" class="form-control" autofocus />
        </div>


        <fieldset class="form-group collapse" id="AllowLogoutEndpointFieldSet">
            <fieldset class="form-group">
                <div class="form-check">
                    <label class="form-check-label">
                        <input asp-for="AllowLogoutEndpoint" type="checkbox" data-toggle="collapse" data-target="#postLogoutRedirectUris" class="form-check-input" checked="@Model.AllowLogoutEndpoint" />
                        @T["Allow Logout Endpoint"]
                    </label>
                </div>
            </fieldset>
            <div class="form-group collapse" id="postLogoutRedirectUris" name="postLogoutRedirectUris">
                <div class="form-group" asp-validation-class-for="PostLogoutRedirectUris">
                    <label asp-for="PostLogoutRedirectUris">@T["Post Logout Redirect Uris"]</label>
                    <span asp-validation-for="PostLogoutRedirectUris" class="text-danger">@T["At least one Post Logout Redirect Uri is required."]</span>
                    <input asp-for="PostLogoutRedirectUris" class="form-control" autofocus />
                </div>
            </div>
        </fieldset>
        <div class="form-group" asp-validation-class-for="ConsentType">
            <label asp-for="ConsentType">@T["Consent type"]</label>
            <select asp-for="ConsentType" class="form-control">
                <option value="@OpenIddictConstants.ConsentTypes.Explicit">@T["Explicit consent"]</option>
                <option value="@OpenIddictConstants.ConsentTypes.Implicit">@T["Implicit consent"]</option>
                <option value="@OpenIddictConstants.ConsentTypes.External">@T["External consent"]</option>
            </select>
            <div class="hint">
                @T["The consent type affects the way authorization requests are handled."]
                <ul>
                    <li>When the consent is explicit, the authorization request must be approved by the end user. <strong>This is the recommended option.</strong></li>
                    <li>When the consent is implicit, the authorization request is assumed to be pre-approved and no consent form is displayed.</li>
                    <li>When the consent is external, the authorization request is rejected unless a pre-existing authorization (granted programatically) already exists.</li>
                </ul>
            </div>
        </div>
    </div>

    <div class="form-group collapse" id="RoleGroup" name="RoleGroup">
        <h6>@T["Client Credentials Roles"]</h6>
        @for (var i = 0; i < Model.RoleEntries.Count; i++)
        {
            <div class="form-check">
                <label class="form-check-label" asp-for="RoleEntries[i].Selected">
                    <input class="form-check-input" type="checkbox" asp-for="RoleEntries[i].Selected" />
                    <input type="hidden" asp-for="RoleEntries[i].Name" />
                    @Model.RoleEntries[i].Name
                </label>
            </div>
        }
    </div>

    <fieldset>
        <div class="form-group">
            <button class="btn btn-primary" type="submit">@T["Save"]</button>
            <a class="btn btn-secondary" asp-route-action="Index">@T["Cancel"]</a>
        </div>
    </fieldset>
</form>
<script at="Foot" type="text/javascript">
    //<![CDATA[
    window.onload = function () {
        refreshForbiddenFlows();
        refreshClientSecret('@OpenIddictConstants.ClientTypes.Confidential');
        refreshFlows();
        refreshOfflineAccessTip(false);

        function refreshForbiddenFlows() {
            @if (settings == null)
            {
                <text>
                    $("#AllowAuthorizationCodeFlowFieldSet").collapse("show");
                    $("#AllowImplicitFlowFieldSet").collapse("show");
                    $("#AllowPasswordFlowFieldSet").collapse("show");
                    $("#AllowClientCredentialsFlowFieldSet").collapse("show");
                    $("#AllowRefreshTokenFlowFieldSet").collapse("show");
                    $("#AllowLogoutEndpointFieldSet").collapse("show");
                </text>

            }
            else
            {
                <text>
                    if (@(settings.AllowAuthorizationCodeFlow.ToString().ToLower()) == true) {
                        $("#AllowAuthorizationCodeFlowFieldSet").collapse("show");
                    }
                    else {
                        $("#AllowAuthorizationCodeFlowFieldSet").collapse("hide");
                        $("#AllowAuthorizationCodeFlow").prop("checked", false);
                    }

                    if (@(settings.AllowImplicitFlow.ToString().ToLower()) == true) {
                        $("#AllowImplicitFlowFieldSet").collapse("show");
                    }
                    else {
                        $("#AllowImplicitFlowFieldSet").collapse("hide");
                        $("#AllowImplicitFlow").prop("checked", false);
                    }


                    if (@(settings.AllowPasswordFlow.ToString().ToLower()) == true) {
                        $("#AllowPasswordFlowFieldSet").collapse("show");
                    }
                    else {
                        $("#AllowPasswordFlowFieldSet").collapse("hide");
                        $("#AllowPasswordFlow").prop("checked", false);
                    }

                    if (@(settings.AllowClientCredentialsFlow.ToString().ToLower()) === true) {
                        $("#AllowClientCredentialsFlowFieldSet").collapse("show");
                    }
                    else {
                        $("#AllowClientCredentialsFlowFieldSet").collapse("hide");
                        $("#AllowClientCredentialsFlow").prop("checked", false);
                    }

                    if (@(settings.AllowRefreshTokenFlow.ToString().ToLower()) == true) {
                        $("#AllowRefreshTokenFlowFieldSet").collapse("show");
                    }
                    else {
                        $("#AllowRefreshTokenFlowFieldSet").collapse("hide");
                        $("#AllowRefreshTokenFlow").prop("checked", false);
                    }

                    if (@(settings.EnableLogoutEndpoint.ToString().ToLower()) == true) {
                        $("#AllowLogoutEndpointFieldSet").collapse("show");
                    }
                    else {
                        $("#AllowLogoutEndpointFieldSet").collapse("hide");
                        $("#AllowLogoutEndpointFieldSet").prop("checked", false);
                    }
                </text>
            }
        }

        $("#Type").change(function () {
            refreshClientSecret();
        });
        function refreshClientSecret(defaultType) {
            var type = $("#Type");

            var allowClientCredentialsFlow = $("#AllowClientCredentialsFlow");
            if ($("#Type").val() === '@OpenIddictConstants.ClientTypes.Confidential') {
                allowClientCredentialsFlow.removeAttr("disabled");
            }
            else {
                allowClientCredentialsFlow.attr('disabled', true);
                allowClientCredentialsFlow.prop("checked", false);
            }

            var clientSecretHints = $("#AllowPasswordFlowRecommendedHint, #AllowAuthorizationCodeFlowRecommendedHint, #AllowImplicitFlowRecommendedHint, #AllowRefreshTokenFlowRecommendedHint");

            if (defaultType === $("#Type").val())
                return;

            if ($("#Type").val() === '@OpenIddictConstants.ClientTypes.Confidential') {
                clientSecretHints.each(function () { this.innerText = this.innerText.replace("client_id, ", "client_id, client_secret, "); });
            }
            else {
                clientSecretHints.each(function () { this.innerText = this.innerText.replace("client_id, client_secret, ", "client_id, "); });
            }
        }


        $("#AllowRefreshTokenFlow").change(function () {
            refreshOfflineAccessTip();
        });

        function refreshOfflineAccessTip(defaultValue) {
            var offlineAccessHints = $("#AllowPasswordFlowRecommendedHint, #AllowAuthorizationCodeFlowRecommendedHint");
            var allowRefreshTokenFlow = $("#AllowRefreshTokenFlow");
            if (defaultValue === allowRefreshTokenFlow.prop('checked'))
                return;

            if (allowRefreshTokenFlow.prop('checked')) {
                offlineAccessHints.each(function () { this.innerText = this.innerText.replace("roles", "roles, offline_access"); });
            }
            else {
                offlineAccessHints.each(function () { this.innerText = this.innerText.replace(", offline_access", ""); });
            }
        }

        $("#AllowClientCredentialsFlow, #AllowPasswordFlow, #AllowAuthorizationCodeFlow, #AllowImplicitFlow, #AllowRefreshTokenFlow").change(function () {
            refreshFlows();
        });

        function refreshFlows() {
            refreshRoleGroup();
            refreshAllowRefreshTokenFlowVisibility();
            refreshRedirectSettings();
        }
        function refreshRoleGroup() {
            $("#RoleGroup").collapse($("#AllowClientCredentialsFlow").prop('checked') ? "show" : "hide");
        }
        function refreshAllowRefreshTokenFlowVisibility() {
            var allowRefreshTokenFlow = $("#AllowRefreshTokenFlow");

            if ($("#AllowPasswordFlow").prop('checked') || $("#AllowAuthorizationCodeFlow").prop('checked')) {
                allowRefreshTokenFlow.removeAttr("disabled");
            }
            else {
                allowRefreshTokenFlow.attr('disabled', true);
                allowRefreshTokenFlow.prop("checked", false);
                $("#AllowRefreshTokenFlowRecommendedHint").collapse("hide");
                refreshOfflineAccessTip();
            }
        }
        function refreshRedirectSettings() {
            var redirectSection = $("#RedirectSection");
            var skipConsent = $("#SkipConsent");
            var postLogoutRedirecUris = $("#postLogoutRedirectUris")

            if ($("#AllowImplicitFlow").prop('checked') || $("#AllowAuthorizationCodeFlow").prop('checked')) {
                redirectSection.collapse("show");
                if ($("#AllowLogoutEndpoint").prop('checked')) {
                    postLogoutRedirecUris.collapse("show");
                }
                else {
                    postLogoutRedirecUris.collapse("hide");
                }
            }
            else {
                skipConsent.prop("checked", false);
                redirectSection.collapse("hide");
                $("#AllowLogoutEndpoint").prop('checked', false);
                postLogoutRedirecUris.collapse("hide");
            }
        }
    };
    //]]>
</script>